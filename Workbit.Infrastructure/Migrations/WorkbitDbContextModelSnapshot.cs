// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workbit.Infrastructure.Database;

#nullable disable

namespace Workbit.Infrastructure.Migrations
{
    [DbContext(typeof(WorkbitDbContext))]
    partial class WorkbitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a2f4b30-c2fa-4c77-bf3a-9b6a4cf11801"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e205c54-e829-4726-be47-b0b49e8a8317",
                            DateOfBirth = new DateTime(1980, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.m.lewis@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Lewis",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.M.LEWIS@WORKBIT.COM",
                            NormalizedUserName = "JOHN.M.LEWIS",
                            PasswordHash = "AQAAAAIAAYagAAAAEIq3htapE/VPxv3SDmrZgRmTMN+9u7S/Z5fzaGKDuSRS7HhrToJlCNPhFCYKzAYwWg==",
                            PhoneNumber = "+1-555-697-2170",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1de19e62-0537-4451-a32e-ae1682e98b01",
                            TwoFactorEnabled = false,
                            UserName = "john.m.lewis"
                        },
                        new
                        {
                            Id = new Guid("f83d8c21-0b43-4b15-8fd1-20f4e5c72f02"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30ec27b8-1fa4-42bc-97f5-15fbbef51858",
                            DateOfBirth = new DateTime(1982, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lisa.r.anderson@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Lisa",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "LISA.R.ANDERSON@WORKBIT.COM",
                            NormalizedUserName = "LISA.R.ANDERSON",
                            PasswordHash = "AQAAAAIAAYagAAAAELujkE7QTimXCWeo54viIBXmDDhjBy1aP4KNMhS4vrqkdroioj9SRqeZhR9afKsG8A==",
                            PhoneNumber = "+1-555-708-6276",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7854c925-db60-4a62-bc14-cb6212a6e539",
                            TwoFactorEnabled = false,
                            UserName = "lisa.r.anderson"
                        },
                        new
                        {
                            Id = new Guid("befa88e8-83fc-4b64-b4ce-7de0b97b6e51"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da0c35b2-c8a7-4630-9bbe-0a706f57a585",
                            DateOfBirth = new DateTime(1983, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michael.j.evans@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Michael",
                            LastName = "Evans",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAEL.J.EVANS@WORKBIT.COM",
                            NormalizedUserName = "MICHAEL.J.EVANS",
                            PasswordHash = "AQAAAAIAAYagAAAAENnSGO5B7CesSteuBzl56BqRtv9/VM2KFNmoWbWIbxRzk3GZra+WRt2U5ToDqdyZBw==",
                            PhoneNumber = "+1-555-987-7521",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf4e29f7-4fa0-4095-817b-e49f39804fc3",
                            TwoFactorEnabled = false,
                            UserName = "michael.j.evans"
                        },
                        new
                        {
                            Id = new Guid("64d07af7-8ed1-4620-b34d-bd0a4cb81d03"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fc74e5a-42e2-4a06-8052-ed96264a5569",
                            DateOfBirth = new DateTime(1978, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carl.t.morgan@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Carl",
                            LastName = "Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARL.T.MORGAN@WORKBIT.COM",
                            NormalizedUserName = "CARL.T.MORGAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHq+G3uc242WnI3Z8/P39om/8ZtV3wmJZdtVgwHT2K5MEGQoqtJTHILzoYRvwhEKKQ==",
                            PhoneNumber = "+1-555-517-3785",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6158647c-bce8-42da-a4ba-ba9e3a17876c",
                            TwoFactorEnabled = false,
                            UserName = "carl.t.morgan"
                        },
                        new
                        {
                            Id = new Guid("b06c8a25-b13c-4d31-bb49-113aa0cc46b8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2332768e-f073-4a0b-b196-3c12b7e97fc8",
                            DateOfBirth = new DateTime(1984, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "julia.p.schmidt@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Julia",
                            LastName = "Schmidt",
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIA.P.SCHMIDT@WORKBIT.COM",
                            NormalizedUserName = "JULIA.P.SCHMIDT",
                            PasswordHash = "AQAAAAIAAYagAAAAEK0L4Q94NEpyR/OzGzuKiGZlzZEE0ip7W7Ve4Kr2y/e7yD5PjouK44nwJFWNjE5mFQ==",
                            PhoneNumber = "+1-555-938-7185",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afec8104-7605-41fa-896d-32444fe5cbd8",
                            TwoFactorEnabled = false,
                            UserName = "julia.p.schmidt"
                        },
                        new
                        {
                            Id = new Guid("b0cf2834-19c5-43f5-b29e-9bb85a5a5d04"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff306bb5-f9a9-4565-8e20-6d190f5ee2bb",
                            DateOfBirth = new DateTime(1985, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nina.v.hughes@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Nina",
                            LastName = "Hughes",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINA.V.HUGHES@WORKBIT.COM",
                            NormalizedUserName = "NINA.V.HUGHES",
                            PasswordHash = "AQAAAAIAAYagAAAAEBN8TcTG9qjkwsgrjm8rcCDiXBM/rPeKrKexwrT5/yztBTj6uU48niuUNmhHMFqUlA==",
                            PhoneNumber = "+1-555-766-2628",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d1ba08e-ab0e-4665-ae87-6ba008d42d87",
                            TwoFactorEnabled = false,
                            UserName = "nina.v.hughes"
                        },
                        new
                        {
                            Id = new Guid("b23ae748-2292-4712-8778-3eb591c2f001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "009662c2-05cb-4b09-93c8-70309774682b",
                            DateOfBirth = new DateTime(1981, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "antoine.c.leblanc@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Antoine",
                            LastName = "LeBlanc",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTOINE.C.LEBLANC@WORKBIT.COM",
                            NormalizedUserName = "ANTOINE.C.LEBLANC",
                            PasswordHash = "AQAAAAIAAYagAAAAEHujRK4H9fldGtH82ma5hFVtlXUSEQ+y1Vvvgci3uqI38zdCXp384swBrT+sISNV5A==",
                            PhoneNumber = "+1-555-913-5845",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3843238c-922b-45ea-a734-560c37a0ac41",
                            TwoFactorEnabled = false,
                            UserName = "antoine.c.leblanc"
                        },
                        new
                        {
                            Id = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91016244-5b16-4159-9c52-fe29a297831b",
                            DateOfBirth = new DateTime(1995, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.k.watson@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Watson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.K.WATSON@WORKBIT.COM",
                            NormalizedUserName = "ALICE.K.WATSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEPGUyCHeeIOKQwHD4ynBJH5/6cUQnUX3EH/1zjFPYauvE9RBhD4OBb2ruO0bdcduoQ==",
                            PhoneNumber = "+1-555-429-2443",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3251529e-72ce-4ad7-a284-44610fde7d2b",
                            TwoFactorEnabled = false,
                            UserName = "alice.k.watson"
                        },
                        new
                        {
                            Id = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2d5c175-cd00-45be-b39e-dc84f80fee8e",
                            DateOfBirth = new DateTime(1994, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.c.thomas@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.C.THOMAS@WORKBIT.COM",
                            NormalizedUserName = "BOB.C.THOMAS",
                            PasswordHash = "AQAAAAIAAYagAAAAELk9CF0D41egudOo5gUMmeEscdFQaQxT9k/Uk5X3r4pbwpRcXdeb8S8x/2U0kt//ig==",
                            PhoneNumber = "+1-555-811-2595",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83d0c7cb-7656-4f35-af53-c6a4c882bb81",
                            TwoFactorEnabled = false,
                            UserName = "bob.c.thomas"
                        },
                        new
                        {
                            Id = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fa3b1b9-2f8e-41e3-b664-5a62cda8d5d6",
                            DateOfBirth = new DateTime(1992, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "claire.b.james@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Claire",
                            LastName = "James",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLAIRE.B.JAMES@WORKBIT.COM",
                            NormalizedUserName = "CLAIRE.B.JAMES",
                            PasswordHash = "AQAAAAIAAYagAAAAENDCFye/ipk1gZJN6HBzb3oG/j7fWzAMoearFRlMg2QtwQVxJTUyP9EnT8UT4Guk+w==",
                            PhoneNumber = "+1-555-712-4805",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a8b5428-7b6e-4a44-9129-9da2e042e4cf",
                            TwoFactorEnabled = false,
                            UserName = "claire.b.james"
                        },
                        new
                        {
                            Id = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af4d2805-4945-4a57-9657-19a8e7439b09",
                            DateOfBirth = new DateTime(1993, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dave.r.walker@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Dave",
                            LastName = "Walker",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVE.R.WALKER@WORKBIT.COM",
                            NormalizedUserName = "DAVE.R.WALKER",
                            PasswordHash = "AQAAAAIAAYagAAAAEHne0ILfC36VynSc7G4G4HsyFWW5assRuad8nNuPKqZwpmZ7VjAAUjh48F88FKIu2w==",
                            PhoneNumber = "+1-555-823-3120",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fb773d3-fc7c-46aa-8b86-4c83b2c724bb",
                            TwoFactorEnabled = false,
                            UserName = "dave.r.walker"
                        },
                        new
                        {
                            Id = new Guid("30c2adf9-9ab8-4c59-b356-2f8bb6c82d09"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "185fd541-4e87-46d6-be7a-3a96bf2852f4",
                            DateOfBirth = new DateTime(1991, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.d.young@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            LastName = "Young",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.D.YOUNG@WORKBIT.COM",
                            NormalizedUserName = "EMILY.D.YOUNG",
                            PasswordHash = "AQAAAAIAAYagAAAAENeRdfroaL2eOZuD8KVeMHGFRoaEuT3Pb+ZOsEn+zS2bhB+mYoJTu6rqz3oM/GFmqA==",
                            PhoneNumber = "+1-555-651-1473",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb2d9b06-894d-49a7-86e9-cb2ec8467b46",
                            TwoFactorEnabled = false,
                            UserName = "emily.d.young"
                        },
                        new
                        {
                            Id = new Guid("a73cb7de-df18-4b6e-a573-0dcf1f703e10"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4849799-cdf1-4f9c-9bb8-bc9a1ea5714f",
                            DateOfBirth = new DateTime(1990, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "frank.h.scott@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Frank",
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.H.SCOTT@WORKBIT.COM",
                            NormalizedUserName = "FRANK.H.SCOTT",
                            PasswordHash = "AQAAAAIAAYagAAAAEHdy6aOANeGGuAUY3/vM7NrdbWaOp4z8SJ/HjaHZyc5M9W+034DLpcFhoxfUp4j7TA==",
                            PhoneNumber = "+1-555-532-8093",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43bebb13-363c-4847-bf82-1817e5b517d9",
                            TwoFactorEnabled = false,
                            UserName = "frank.h.scott"
                        },
                        new
                        {
                            Id = new Guid("cf9f7b3e-6cdb-4b9a-a0b4-4e2f7d527e11"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ade70a3c-f621-4525-990b-00a284c70844",
                            DateOfBirth = new DateTime(1996, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "grace.l.adams@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Grace",
                            LastName = "Adams",
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.L.ADAMS@WORKBIT.COM",
                            NormalizedUserName = "GRACE.L.ADAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAEMvczeewdJwMifCd+/ydI1/cdgVNtFhdNthkcTaca3f8vZwGFpgJQbqh9b4l+joTVg==",
                            PhoneNumber = "+1-555-548-2151",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "785360b7-9859-4e80-9484-5e33446b1297",
                            TwoFactorEnabled = false,
                            UserName = "grace.l.adams"
                        },
                        new
                        {
                            Id = new Guid("a802de4b-6a4a-4e15-a8c3-41f5a6c8d012"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a28b6c36-23e2-4139-ab3c-b46b4df797ea",
                            DateOfBirth = new DateTime(1997, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "harry.n.brooks@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Harry",
                            LastName = "Brooks",
                            LockoutEnabled = false,
                            NormalizedEmail = "HARRY.N.BROOKS@WORKBIT.COM",
                            NormalizedUserName = "HARRY.N.BROOKS",
                            PasswordHash = "AQAAAAIAAYagAAAAECfONgmk5X29ewCWic3mrJV3jQl7mYZm/J170299vlGbMBXkBkc93m93dg3EfKOiew==",
                            PhoneNumber = "+1-555-710-6841",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f721ba84-3557-4cd5-a48e-6199698bf5b4",
                            TwoFactorEnabled = false,
                            UserName = "harry.n.brooks"
                        },
                        new
                        {
                            Id = new Guid("d5e7f9a2-0ac3-4b6d-8c64-6fd8e4c0c013"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "900ed8f0-07cc-4186-8aaf-e2063c4df1c7",
                            DateOfBirth = new DateTime(1994, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMINADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEL5RL2LSb2/qlnIY9nRDC2N7YqSYoyJumFt+KHTNcSaNTqUNSufJ5sqGC/oFfEdzZQ==",
                            PhoneNumber = "+1-555-829-3807",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46fceab0-70cb-411f-8c64-2b7a7c2947a8",
                            TwoFactorEnabled = false,
                            UserName = "adminadmin"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Ceo", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("Ceos");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("9a2f4b30-c2fa-4c77-bf3a-9b6a4cf11801")
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Employee", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId");

                    b.HasIndex("CountryCode");

                    b.HasIndex("JobId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005"),
                            CountryCode = "BG",
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQekjolc76-E_kX_lMo2JC_LIu0kJL37rEsCQ1wM9fnldhkpX2plFrfIoAuYPgACoC3wSef6sBeBk1nSAOq9q-aU8bm3rdoNtZJ28IT_YCGSrgDazFWHoXPeQMz7o1FW7eQ",
                            JobId = 1,
                            Level = 2
                        },
                        new
                        {
                            ApplicationUserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06"),
                            CountryCode = "IT",
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQdmFqZ_hV2FI-r2sgZpdmCRw-r4oGRAbKEiNGLM7HEp0kk2UP61ShFaLfLiHB5OEJQTWdMhCA7bL_3or_ys1BkZXSsylU_pbWnnpFcUwblb8VBf6Kbf41WS2Q8Kz-huLE4",
                            JobId = 1,
                            Level = 1
                        },
                        new
                        {
                            ApplicationUserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07"),
                            CountryCode = "ES",
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQeLR-d7btJyTNcJ4e8F43o9Y-YuKz4_JEgkYUoP2K0O_0Ei-1q33qbdCwMoowNz2T6XtQ97TO_9_N_R3zG3QXWcBN-rtL_VnvOX1Nq9YFU_MRD7Unv54FxGG5KxLlMih4Q",
                            JobId = 2,
                            Level = 4
                        },
                        new
                        {
                            ApplicationUserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08"),
                            CountryCode = "RO",
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQfp0yogNQRhs0CmqjTRmZqBGGmMfbhQ9JdvcsU4YIvYwNerc8GhujPand2O0xNqFyDXBDGf3gDVHvOPldhfSIclyYz2R98i6084iTswQTRrsoHGgsLFBmQhRYDsyiu9zHM",
                            JobId = 2,
                            Level = 3
                        },
                        new
                        {
                            ApplicationUserId = new Guid("30c2adf9-9ab8-4c59-b356-2f8bb6c82d09"),
                            CountryCode = "NL",
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQfbWsexCkxvG5_V8mrxXmhFtJBVn3SITkFqluUfbhyLolFc0s-wM5k1cfeaLqTGk-hyHpaW5X4Ge6NQxLJwenNgX5EMrZhPx79OIULCy3PeWVbzsYKzaCxFfEL_CduDEt8",
                            JobId = 3,
                            Level = 2
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a73cb7de-df18-4b6e-a573-0dcf1f703e10"),
                            CountryCode = "PL",
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQeJ3T9cLLDsHgl6JzAb3uZDfKA9U9xQ9YH8tthH0EBMkGczum9Q2j1Z3xRBYcHMiopT9Eu8Yo-Y9VfGAviJQid2UCE3ZXB80cEbWjElv7HOMQSZovDoZj2IsL6hK0NAM_U",
                            JobId = 3,
                            Level = 1
                        },
                        new
                        {
                            ApplicationUserId = new Guid("cf9f7b3e-6cdb-4b9a-a0b4-4e2f7d527e11"),
                            CountryCode = "SE",
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQeOFJcCVozptTarwY1ykkzvGInyEVoiDKkghgXGxP_9cdRLRP8qNxzvplgRM8h6XCsn_wwK9ovPz4T-KG1img5LaRk1dRBIZvbzVHT-zvBaXORy6-s_wBauDIxf4PkuD7s",
                            JobId = 4,
                            Level = 3
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a802de4b-6a4a-4e15-a8c3-41f5a6c8d012"),
                            CountryCode = "IE",
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQe8u62GvtKm721vmUeZZVWiOkD_QuigpSMPCfxPMwcPw01qTjW1QBNcp7S2CHf_xOItQlVQ6CdY5rjvlMSLU_ftus_Cb8-XIkOSk1WTd8gObbRdYh6t3C5nFzajw50VeBs",
                            JobId = 4,
                            Level = 4
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Manager", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationUserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("f83d8c21-0b43-4b15-8fd1-20f4e5c72f02"),
                            DepartmentId = 1,
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQcta57CEJkUbbOiNR8L19sH-qTJdQGtLOpeYtdhhR8TYE4u0tgnRU2pjSQE0YySguctHTVAcUtc0LkAoa0CjugD4X13tKCNm_kO974h9uyFEKqe7iBldrySk_Oj8ExdY3U"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("befa88e8-83fc-4b64-b4ce-7de0b97b6e51"),
                            DepartmentId = 1,
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQcdBFQQ6hannFMM-Rx-Gooc3csoU10u3Q3ufXICXBKSe2BxOgPsN6VwUa-4Ebpf8yW7XFa7jP1vg5B0dLJQr3iWP5pObXEO-_mFOazeiLxGHcGhHEO93uYpgz5hlxx4M5E"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("64d07af7-8ed1-4620-b34d-bd0a4cb81d03"),
                            DepartmentId = 2,
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQdsm3-_M3JdtRWxCqMBoIM-q9Tv0SOkDksAqTwOmvi_3SHaeHoRGahgMHS9a0cU-fEqSmXHiDpBVOqs_h1c0R1xrsIibtO215QZ9ijqyforNnntcep3wNv5P9mS8FWFH6M"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b06c8a25-b13c-4d31-bb49-113aa0cc46b8"),
                            DepartmentId = 2,
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQe4vB9pK3qZaHL0ayV6Qayqf0nQBVunhyxjZKLB4uUELBEOPiwheH1pz2y27PQqdzIiaKpWD9RItW4vs3StxsSAksrFU9uxCV95puuaP3FyXRY3nTInkK7Mnj8HKkWM5yY"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b0cf2834-19c5-43f5-b29e-9bb85a5a5d04"),
                            DepartmentId = 3,
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQfXxgAr46KkYTwYjmk0wwWs_EOHAyWubXA_K_SJvLmsO7-Uq_4WznLZxTNO3WMQPK2eqpD6x-wjA23y6mPdrW3xR4OyXbt1T-b7VQofX9plA88aIsw1bwxtcWnYpIr0bqo"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b23ae748-2292-4712-8778-3eb591c2f001"),
                            DepartmentId = 3,
                            IBAN = "CfDJ8MORe6_-QS9CuZ4o3MEQhQdejqOvrETJz-E-QlRMYJQdD68c9cfxEmERACeQZ88_GChFSbGXtvIq3-3_w5Zk86CLJp1SoIruBxq9RpbdZRYRjcphTmXT2hkqlUwSptH7Y_0GZUNYdYMI4JRxz0C5gcw"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.AttendanceEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Timestamp = new DateTime(2025, 7, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 2,
                            Timestamp = new DateTime(2025, 7, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 3,
                            Timestamp = new DateTime(2025, 7, 14, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 4,
                            Timestamp = new DateTime(2025, 7, 14, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 5,
                            Timestamp = new DateTime(2025, 7, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 6,
                            Timestamp = new DateTime(2025, 7, 14, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 7,
                            Timestamp = new DateTime(2025, 7, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 8,
                            Timestamp = new DateTime(2025, 7, 14, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 9,
                            Timestamp = new DateTime(2025, 7, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 10,
                            Timestamp = new DateTime(2025, 7, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 11,
                            Timestamp = new DateTime(2025, 7, 15, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 12,
                            Timestamp = new DateTime(2025, 7, 15, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 13,
                            Timestamp = new DateTime(2025, 7, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 14,
                            Timestamp = new DateTime(2025, 7, 15, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 15,
                            Timestamp = new DateTime(2025, 7, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 16,
                            Timestamp = new DateTime(2025, 7, 15, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 17,
                            Timestamp = new DateTime(2025, 7, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 18,
                            Timestamp = new DateTime(2025, 7, 16, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 19,
                            Timestamp = new DateTime(2025, 7, 16, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 20,
                            Timestamp = new DateTime(2025, 7, 16, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 21,
                            Timestamp = new DateTime(2025, 7, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 22,
                            Timestamp = new DateTime(2025, 7, 16, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 23,
                            Timestamp = new DateTime(2025, 7, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 24,
                            Timestamp = new DateTime(2025, 7, 17, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 25,
                            Timestamp = new DateTime(2025, 7, 17, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 26,
                            Timestamp = new DateTime(2025, 7, 17, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 27,
                            Timestamp = new DateTime(2025, 7, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 28,
                            Timestamp = new DateTime(2025, 7, 17, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 29,
                            Timestamp = new DateTime(2025, 7, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 30,
                            Timestamp = new DateTime(2025, 7, 17, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 31,
                            Timestamp = new DateTime(2025, 7, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 32,
                            Timestamp = new DateTime(2025, 7, 18, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 33,
                            Timestamp = new DateTime(2025, 7, 18, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 34,
                            Timestamp = new DateTime(2025, 7, 18, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 35,
                            Timestamp = new DateTime(2025, 7, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 36,
                            Timestamp = new DateTime(2025, 7, 18, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 37,
                            Timestamp = new DateTime(2025, 7, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 38,
                            Timestamp = new DateTime(2025, 7, 18, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("CeoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CeoId")
                        .IsUnique();

                    b.HasIndex("CountryCode");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Business Blvd, New York, NY, USA",
                            CeoId = new Guid("9a2f4b30-c2fa-4c77-bf3a-9b6a4cf11801"),
                            ContactPhone = "+1-555-0000",
                            CountryCode = "US",
                            Name = "Workbit Solutions Inc."
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Code = "AD",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Andorra"
                        },
                        new
                        {
                            Code = "AE",
                            Continent = "Asia",
                            CurrencyCode = "AED",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Code = "AF",
                            Continent = "Asia",
                            CurrencyCode = "AFN",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Code = "AG",
                            Continent = "North America",
                            CurrencyCode = "XCD",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Code = "AI",
                            Continent = "North America",
                            CurrencyCode = "XCD",
                            Name = "Anguilla"
                        },
                        new
                        {
                            Code = "AL",
                            Continent = "Europe",
                            CurrencyCode = "ALL",
                            Name = "Albania"
                        },
                        new
                        {
                            Code = "AM",
                            Continent = "Asia",
                            CurrencyCode = "AMD",
                            Name = "Armenia"
                        },
                        new
                        {
                            Code = "AO",
                            Continent = "Africa",
                            CurrencyCode = "AOA",
                            Name = "Angola"
                        },
                        new
                        {
                            Code = "AQ",
                            Continent = "Antarctica",
                            CurrencyCode = "",
                            Name = "Antarctica"
                        },
                        new
                        {
                            Code = "AR",
                            Continent = "South America",
                            CurrencyCode = "ARS",
                            Name = "Argentina"
                        },
                        new
                        {
                            Code = "AS",
                            Continent = "Oceania",
                            CurrencyCode = "USD",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Code = "AT",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Austria"
                        },
                        new
                        {
                            Code = "AU",
                            Continent = "Oceania",
                            CurrencyCode = "AUD",
                            Name = "Australia"
                        },
                        new
                        {
                            Code = "AW",
                            Continent = "North America",
                            CurrencyCode = "AWG",
                            Name = "Aruba"
                        },
                        new
                        {
                            Code = "AX",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Åland Islands"
                        },
                        new
                        {
                            Code = "AZ",
                            Continent = "Asia",
                            CurrencyCode = "AZN",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Code = "BA",
                            Continent = "Europe",
                            CurrencyCode = "BAM",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Code = "BB",
                            Continent = "North America",
                            CurrencyCode = "BBD",
                            Name = "Barbados"
                        },
                        new
                        {
                            Code = "BD",
                            Continent = "Asia",
                            CurrencyCode = "BDT",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Code = "BE",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Belgium"
                        },
                        new
                        {
                            Code = "BF",
                            Continent = "Africa",
                            CurrencyCode = "XOF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Code = "BG",
                            Continent = "Europe",
                            CurrencyCode = "BGN",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Code = "BH",
                            Continent = "Asia",
                            CurrencyCode = "BHD",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Code = "BI",
                            Continent = "Africa",
                            CurrencyCode = "BIF",
                            Name = "Burundi"
                        },
                        new
                        {
                            Code = "BJ",
                            Continent = "Africa",
                            CurrencyCode = "XOF",
                            Name = "Benin"
                        },
                        new
                        {
                            Code = "BL",
                            Continent = "North America",
                            CurrencyCode = "EUR",
                            Name = "Saint Barthélemy"
                        },
                        new
                        {
                            Code = "BM",
                            Continent = "North America",
                            CurrencyCode = "BMD",
                            Name = "Bermuda"
                        },
                        new
                        {
                            Code = "BN",
                            Continent = "Asia",
                            CurrencyCode = "BND",
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            Code = "BO",
                            Continent = "South America",
                            CurrencyCode = "BOB",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Code = "BQ",
                            Continent = "North America",
                            CurrencyCode = "USD",
                            Name = "Bonaire, Sint Eustatius and Saba"
                        },
                        new
                        {
                            Code = "BR",
                            Continent = "South America",
                            CurrencyCode = "BRL",
                            Name = "Brazil"
                        },
                        new
                        {
                            Code = "BS",
                            Continent = "North America",
                            CurrencyCode = "BSD",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Code = "BT",
                            Continent = "Asia",
                            CurrencyCode = "BTN",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Code = "BV",
                            Continent = "Antarctica",
                            CurrencyCode = "NOK",
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Code = "BW",
                            Continent = "Africa",
                            CurrencyCode = "BWP",
                            Name = "Botswana"
                        },
                        new
                        {
                            Code = "BY",
                            Continent = "Europe",
                            CurrencyCode = "BYN",
                            Name = "Belarus"
                        },
                        new
                        {
                            Code = "BZ",
                            Continent = "North America",
                            CurrencyCode = "BZD",
                            Name = "Belize"
                        },
                        new
                        {
                            Code = "CA",
                            Continent = "North America",
                            CurrencyCode = "CAD",
                            Name = "Canada"
                        },
                        new
                        {
                            Code = "CC",
                            Continent = "Oceania",
                            CurrencyCode = "AUD",
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            Code = "CD",
                            Continent = "Africa",
                            CurrencyCode = "CDF",
                            Name = "Congo (Democratic Republic)"
                        },
                        new
                        {
                            Code = "CF",
                            Continent = "Africa",
                            CurrencyCode = "XAF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Code = "CG",
                            Continent = "Africa",
                            CurrencyCode = "XAF",
                            Name = "Congo"
                        },
                        new
                        {
                            Code = "CH",
                            Continent = "Europe",
                            CurrencyCode = "CHF",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Code = "CI",
                            Continent = "Africa",
                            CurrencyCode = "XOF",
                            Name = "Côte d'Ivoire"
                        },
                        new
                        {
                            Code = "CK",
                            Continent = "Oceania",
                            CurrencyCode = "NZD",
                            Name = "Cook Islands"
                        },
                        new
                        {
                            Code = "CL",
                            Continent = "South America",
                            CurrencyCode = "CLP",
                            Name = "Chile"
                        },
                        new
                        {
                            Code = "CM",
                            Continent = "Africa",
                            CurrencyCode = "XAF",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Code = "CN",
                            Continent = "Asia",
                            CurrencyCode = "CNY",
                            Name = "China"
                        },
                        new
                        {
                            Code = "CO",
                            Continent = "South America",
                            CurrencyCode = "COP",
                            Name = "Colombia"
                        },
                        new
                        {
                            Code = "CR",
                            Continent = "North America",
                            CurrencyCode = "CRC",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Code = "CU",
                            Continent = "North America",
                            CurrencyCode = "CUP",
                            Name = "Cuba"
                        },
                        new
                        {
                            Code = "CV",
                            Continent = "Africa",
                            CurrencyCode = "CVE",
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Code = "CW",
                            Continent = "North America",
                            CurrencyCode = "ANG",
                            Name = "Curaçao"
                        },
                        new
                        {
                            Code = "CX",
                            Continent = "Oceania",
                            CurrencyCode = "AUD",
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Code = "CY",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Code = "CZ",
                            Continent = "Europe",
                            CurrencyCode = "CZK",
                            Name = "Czechia"
                        },
                        new
                        {
                            Code = "DE",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Germany"
                        },
                        new
                        {
                            Code = "DJ",
                            Continent = "Africa",
                            CurrencyCode = "DJF",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Code = "DK",
                            Continent = "Europe",
                            CurrencyCode = "DKK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Code = "DM",
                            Continent = "North America",
                            CurrencyCode = "XCD",
                            Name = "Dominica"
                        },
                        new
                        {
                            Code = "DO",
                            Continent = "North America",
                            CurrencyCode = "DOP",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Code = "DZ",
                            Continent = "Africa",
                            CurrencyCode = "DZD",
                            Name = "Algeria"
                        },
                        new
                        {
                            Code = "EC",
                            Continent = "South America",
                            CurrencyCode = "USD",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Code = "EE",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Estonia"
                        },
                        new
                        {
                            Code = "EG",
                            Continent = "Africa",
                            CurrencyCode = "EGP",
                            Name = "Egypt"
                        },
                        new
                        {
                            Code = "EH",
                            Continent = "Africa",
                            CurrencyCode = "MAD",
                            Name = "Western Sahara"
                        },
                        new
                        {
                            Code = "ER",
                            Continent = "Africa",
                            CurrencyCode = "ERN",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Code = "ES",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Spain"
                        },
                        new
                        {
                            Code = "ET",
                            Continent = "Africa",
                            CurrencyCode = "ETB",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Code = "FI",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Finland"
                        },
                        new
                        {
                            Code = "FJ",
                            Continent = "Oceania",
                            CurrencyCode = "FJD",
                            Name = "Fiji"
                        },
                        new
                        {
                            Code = "FK",
                            Continent = "South America",
                            CurrencyCode = "FKP",
                            Name = "Falkland Islands (Malvinas)"
                        },
                        new
                        {
                            Code = "FM",
                            Continent = "Oceania",
                            CurrencyCode = "USD",
                            Name = "Micronesia (Federated States)"
                        },
                        new
                        {
                            Code = "FO",
                            Continent = "Europe",
                            CurrencyCode = "DKK",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            Code = "FR",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "France"
                        },
                        new
                        {
                            Code = "GA",
                            Continent = "Africa",
                            CurrencyCode = "XAF",
                            Name = "Gabon"
                        },
                        new
                        {
                            Code = "GB",
                            Continent = "Europe",
                            CurrencyCode = "GBP",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Code = "GD",
                            Continent = "North America",
                            CurrencyCode = "XCD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Code = "GE",
                            Continent = "Asia",
                            CurrencyCode = "GEL",
                            Name = "Georgia"
                        },
                        new
                        {
                            Code = "GF",
                            Continent = "South America",
                            CurrencyCode = "EUR",
                            Name = "French Guiana"
                        },
                        new
                        {
                            Code = "GG",
                            Continent = "Europe",
                            CurrencyCode = "GBP",
                            Name = "Guernsey"
                        },
                        new
                        {
                            Code = "GH",
                            Continent = "Africa",
                            CurrencyCode = "GHS",
                            Name = "Ghana"
                        },
                        new
                        {
                            Code = "GI",
                            Continent = "Europe",
                            CurrencyCode = "GIP",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Code = "GL",
                            Continent = "North America",
                            CurrencyCode = "DKK",
                            Name = "Greenland"
                        },
                        new
                        {
                            Code = "GM",
                            Continent = "Africa",
                            CurrencyCode = "GMD",
                            Name = "Gambia"
                        },
                        new
                        {
                            Code = "GN",
                            Continent = "Africa",
                            CurrencyCode = "GNF",
                            Name = "Guinea"
                        },
                        new
                        {
                            Code = "GP",
                            Continent = "North America",
                            CurrencyCode = "EUR",
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Code = "GQ",
                            Continent = "Africa",
                            CurrencyCode = "XAF",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Code = "GR",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Greece"
                        },
                        new
                        {
                            Code = "GS",
                            Continent = "Antarctica",
                            CurrencyCode = "GBP",
                            Name = "South Georgia and the South Sandwich Islands"
                        },
                        new
                        {
                            Code = "GT",
                            Continent = "North America",
                            CurrencyCode = "GTQ",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Code = "GU",
                            Continent = "Oceania",
                            CurrencyCode = "USD",
                            Name = "Guam"
                        },
                        new
                        {
                            Code = "GW",
                            Continent = "Africa",
                            CurrencyCode = "XOF",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Code = "GY",
                            Continent = "South America",
                            CurrencyCode = "GYD",
                            Name = "Guyana"
                        },
                        new
                        {
                            Code = "HK",
                            Continent = "Asia",
                            CurrencyCode = "HKD",
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Code = "HM",
                            Continent = "Antarctica",
                            CurrencyCode = "AUD",
                            Name = "Heard Island and McDonald Islands"
                        },
                        new
                        {
                            Code = "HN",
                            Continent = "North America",
                            CurrencyCode = "HNL",
                            Name = "Honduras"
                        },
                        new
                        {
                            Code = "HR",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Croatia"
                        },
                        new
                        {
                            Code = "HT",
                            Continent = "North America",
                            CurrencyCode = "HTG",
                            Name = "Haiti"
                        },
                        new
                        {
                            Code = "HU",
                            Continent = "Europe",
                            CurrencyCode = "HUF",
                            Name = "Hungary"
                        },
                        new
                        {
                            Code = "ID",
                            Continent = "Asia",
                            CurrencyCode = "IDR",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Code = "IE",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Ireland"
                        },
                        new
                        {
                            Code = "IL",
                            Continent = "Asia",
                            CurrencyCode = "ILS",
                            Name = "Israel"
                        },
                        new
                        {
                            Code = "IM",
                            Continent = "Europe",
                            CurrencyCode = "GBP",
                            Name = "Isle of Man"
                        },
                        new
                        {
                            Code = "IN",
                            Continent = "Asia",
                            CurrencyCode = "INR",
                            Name = "India"
                        },
                        new
                        {
                            Code = "IO",
                            Continent = "Asia",
                            CurrencyCode = "USD",
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            Code = "IQ",
                            Continent = "Asia",
                            CurrencyCode = "IQD",
                            Name = "Iraq"
                        },
                        new
                        {
                            Code = "IR",
                            Continent = "Asia",
                            CurrencyCode = "IRR",
                            Name = "Iran"
                        },
                        new
                        {
                            Code = "IS",
                            Continent = "Europe",
                            CurrencyCode = "ISK",
                            Name = "Iceland"
                        },
                        new
                        {
                            Code = "IT",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Italy"
                        },
                        new
                        {
                            Code = "JE",
                            Continent = "Europe",
                            CurrencyCode = "GBP",
                            Name = "Jersey"
                        },
                        new
                        {
                            Code = "JM",
                            Continent = "North America",
                            CurrencyCode = "JMD",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Code = "JO",
                            Continent = "Asia",
                            CurrencyCode = "JOD",
                            Name = "Jordan"
                        },
                        new
                        {
                            Code = "JP",
                            Continent = "Asia",
                            CurrencyCode = "JPY",
                            Name = "Japan"
                        },
                        new
                        {
                            Code = "KE",
                            Continent = "Africa",
                            CurrencyCode = "KES",
                            Name = "Kenya"
                        },
                        new
                        {
                            Code = "KG",
                            Continent = "Asia",
                            CurrencyCode = "KGS",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Code = "KH",
                            Continent = "Asia",
                            CurrencyCode = "KHR",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Code = "KI",
                            Continent = "Oceania",
                            CurrencyCode = "AUD",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Code = "KM",
                            Continent = "Africa",
                            CurrencyCode = "KMF",
                            Name = "Comoros"
                        },
                        new
                        {
                            Code = "KN",
                            Continent = "North America",
                            CurrencyCode = "XCD",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Code = "KP",
                            Continent = "Asia",
                            CurrencyCode = "KPW",
                            Name = "North Korea"
                        },
                        new
                        {
                            Code = "KR",
                            Continent = "Asia",
                            CurrencyCode = "KRW",
                            Name = "South Korea"
                        },
                        new
                        {
                            Code = "KW",
                            Continent = "Asia",
                            CurrencyCode = "KWD",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Code = "KY",
                            Continent = "North America",
                            CurrencyCode = "KYD",
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            Code = "KZ",
                            Continent = "Asia",
                            CurrencyCode = "KZT",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Code = "LA",
                            Continent = "Asia",
                            CurrencyCode = "LAK",
                            Name = "Laos"
                        },
                        new
                        {
                            Code = "LB",
                            Continent = "Asia",
                            CurrencyCode = "LBP",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Code = "LC",
                            Continent = "North America",
                            CurrencyCode = "XCD",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Code = "LI",
                            Continent = "Europe",
                            CurrencyCode = "CHF",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Code = "LK",
                            Continent = "Asia",
                            CurrencyCode = "LKR",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Code = "LR",
                            Continent = "Africa",
                            CurrencyCode = "LRD",
                            Name = "Liberia"
                        },
                        new
                        {
                            Code = "LS",
                            Continent = "Africa",
                            CurrencyCode = "LSL",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Code = "LT",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Code = "LU",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Code = "LV",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Latvia"
                        },
                        new
                        {
                            Code = "LY",
                            Continent = "Africa",
                            CurrencyCode = "LYD",
                            Name = "Libya"
                        },
                        new
                        {
                            Code = "MA",
                            Continent = "Africa",
                            CurrencyCode = "MAD",
                            Name = "Morocco"
                        },
                        new
                        {
                            Code = "MC",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Monaco"
                        },
                        new
                        {
                            Code = "MD",
                            Continent = "Europe",
                            CurrencyCode = "MDL",
                            Name = "Moldova"
                        },
                        new
                        {
                            Code = "ME",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Code = "MF",
                            Continent = "North America",
                            CurrencyCode = "EUR",
                            Name = "Saint Martin (French part)"
                        },
                        new
                        {
                            Code = "MG",
                            Continent = "Africa",
                            CurrencyCode = "MGA",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Code = "MH",
                            Continent = "Oceania",
                            CurrencyCode = "USD",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Code = "MK",
                            Continent = "Europe",
                            CurrencyCode = "MKD",
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Code = "ML",
                            Continent = "Africa",
                            CurrencyCode = "XOF",
                            Name = "Mali"
                        },
                        new
                        {
                            Code = "MM",
                            Continent = "Asia",
                            CurrencyCode = "MMK",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Code = "MN",
                            Continent = "Asia",
                            CurrencyCode = "MNT",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Code = "MO",
                            Continent = "Asia",
                            CurrencyCode = "MOP",
                            Name = "Macao"
                        },
                        new
                        {
                            Code = "MP",
                            Continent = "Oceania",
                            CurrencyCode = "USD",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Code = "MQ",
                            Continent = "North America",
                            CurrencyCode = "EUR",
                            Name = "Martinique"
                        },
                        new
                        {
                            Code = "MR",
                            Continent = "Africa",
                            CurrencyCode = "MRU",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Code = "MS",
                            Continent = "North America",
                            CurrencyCode = "XCD",
                            Name = "Montserrat"
                        },
                        new
                        {
                            Code = "MT",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Malta"
                        },
                        new
                        {
                            Code = "MU",
                            Continent = "Africa",
                            CurrencyCode = "MUR",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Code = "MV",
                            Continent = "Asia",
                            CurrencyCode = "MVR",
                            Name = "Maldives"
                        },
                        new
                        {
                            Code = "MW",
                            Continent = "Africa",
                            CurrencyCode = "MWK",
                            Name = "Malawi"
                        },
                        new
                        {
                            Code = "MX",
                            Continent = "North America",
                            CurrencyCode = "MXN",
                            Name = "Mexico"
                        },
                        new
                        {
                            Code = "MY",
                            Continent = "Asia",
                            CurrencyCode = "MYR",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Code = "MZ",
                            Continent = "Africa",
                            CurrencyCode = "MZN",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Code = "NA",
                            Continent = "Africa",
                            CurrencyCode = "NAD",
                            Name = "Namibia"
                        },
                        new
                        {
                            Code = "NC",
                            Continent = "Oceania",
                            CurrencyCode = "XPF",
                            Name = "New Caledonia"
                        },
                        new
                        {
                            Code = "NE",
                            Continent = "Africa",
                            CurrencyCode = "XOF",
                            Name = "Niger"
                        },
                        new
                        {
                            Code = "NF",
                            Continent = "Oceania",
                            CurrencyCode = "AUD",
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Code = "NG",
                            Continent = "Africa",
                            CurrencyCode = "NGN",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Code = "NI",
                            Continent = "North America",
                            CurrencyCode = "NIO",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Code = "NL",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Code = "NO",
                            Continent = "Europe",
                            CurrencyCode = "NOK",
                            Name = "Norway"
                        },
                        new
                        {
                            Code = "NP",
                            Continent = "Asia",
                            CurrencyCode = "NPR",
                            Name = "Nepal"
                        },
                        new
                        {
                            Code = "NR",
                            Continent = "Oceania",
                            CurrencyCode = "AUD",
                            Name = "Nauru"
                        },
                        new
                        {
                            Code = "NU",
                            Continent = "Oceania",
                            CurrencyCode = "NZD",
                            Name = "Niue"
                        },
                        new
                        {
                            Code = "NZ",
                            Continent = "Oceania",
                            CurrencyCode = "NZD",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Code = "OM",
                            Continent = "Asia",
                            CurrencyCode = "OMR",
                            Name = "Oman"
                        },
                        new
                        {
                            Code = "PA",
                            Continent = "North America",
                            CurrencyCode = "PAB",
                            Name = "Panama"
                        },
                        new
                        {
                            Code = "PE",
                            Continent = "South America",
                            CurrencyCode = "PEN",
                            Name = "Peru"
                        },
                        new
                        {
                            Code = "PF",
                            Continent = "Oceania",
                            CurrencyCode = "XPF",
                            Name = "French Polynesia"
                        },
                        new
                        {
                            Code = "PG",
                            Continent = "Oceania",
                            CurrencyCode = "PGK",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Code = "PH",
                            Continent = "Asia",
                            CurrencyCode = "PHP",
                            Name = "Philippines"
                        },
                        new
                        {
                            Code = "PK",
                            Continent = "Asia",
                            CurrencyCode = "PKR",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Code = "PL",
                            Continent = "Europe",
                            CurrencyCode = "PLN",
                            Name = "Poland"
                        },
                        new
                        {
                            Code = "PM",
                            Continent = "North America",
                            CurrencyCode = "EUR",
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Code = "PN",
                            Continent = "Oceania",
                            CurrencyCode = "NZD",
                            Name = "Pitcairn"
                        },
                        new
                        {
                            Code = "PR",
                            Continent = "North America",
                            CurrencyCode = "USD",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Code = "PS",
                            Continent = "Asia",
                            CurrencyCode = "ILS",
                            Name = "Palestine, State of"
                        },
                        new
                        {
                            Code = "PT",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Portugal"
                        },
                        new
                        {
                            Code = "PW",
                            Continent = "Oceania",
                            CurrencyCode = "USD",
                            Name = "Palau"
                        },
                        new
                        {
                            Code = "PY",
                            Continent = "South America",
                            CurrencyCode = "PYG",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Code = "QA",
                            Continent = "Asia",
                            CurrencyCode = "QAR",
                            Name = "Qatar"
                        },
                        new
                        {
                            Code = "RE",
                            Continent = "Africa",
                            CurrencyCode = "EUR",
                            Name = "Réunion"
                        },
                        new
                        {
                            Code = "RO",
                            Continent = "Europe",
                            CurrencyCode = "RON",
                            Name = "Romania"
                        },
                        new
                        {
                            Code = "RS",
                            Continent = "Europe",
                            CurrencyCode = "RSD",
                            Name = "Serbia"
                        },
                        new
                        {
                            Code = "RU",
                            Continent = "Europe",
                            CurrencyCode = "RUB",
                            Name = "Russia"
                        },
                        new
                        {
                            Code = "RW",
                            Continent = "Africa",
                            CurrencyCode = "RWF",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Code = "SA",
                            Continent = "Asia",
                            CurrencyCode = "SAR",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Code = "SB",
                            Continent = "Oceania",
                            CurrencyCode = "SBD",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Code = "SC",
                            Continent = "Africa",
                            CurrencyCode = "SCR",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Code = "SD",
                            Continent = "Africa",
                            CurrencyCode = "SDG",
                            Name = "Sudan"
                        },
                        new
                        {
                            Code = "SE",
                            Continent = "Europe",
                            CurrencyCode = "SEK",
                            Name = "Sweden"
                        },
                        new
                        {
                            Code = "SG",
                            Continent = "Asia",
                            CurrencyCode = "SGD",
                            Name = "Singapore"
                        },
                        new
                        {
                            Code = "SH",
                            Continent = "Africa",
                            CurrencyCode = "SHP",
                            Name = "Saint Helena, Ascension and Tristan da Cunha"
                        },
                        new
                        {
                            Code = "SI",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Code = "SJ",
                            Continent = "Europe",
                            CurrencyCode = "NOK",
                            Name = "Svalbard and Jan Mayen"
                        },
                        new
                        {
                            Code = "SK",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Code = "SL",
                            Continent = "Africa",
                            CurrencyCode = "SLL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Code = "SM",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "San Marino"
                        },
                        new
                        {
                            Code = "SN",
                            Continent = "Africa",
                            CurrencyCode = "XOF",
                            Name = "Senegal"
                        },
                        new
                        {
                            Code = "SO",
                            Continent = "Africa",
                            CurrencyCode = "SOS",
                            Name = "Somalia"
                        },
                        new
                        {
                            Code = "SR",
                            Continent = "South America",
                            CurrencyCode = "SRD",
                            Name = "Suriname"
                        },
                        new
                        {
                            Code = "SS",
                            Continent = "Africa",
                            CurrencyCode = "SSP",
                            Name = "South Sudan"
                        },
                        new
                        {
                            Code = "ST",
                            Continent = "Africa",
                            CurrencyCode = "STN",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Code = "SV",
                            Continent = "North America",
                            CurrencyCode = "USD",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Code = "SX",
                            Continent = "North America",
                            CurrencyCode = "ANG",
                            Name = "Sint Maarten (Dutch part)"
                        },
                        new
                        {
                            Code = "SY",
                            Continent = "Asia",
                            CurrencyCode = "SYP",
                            Name = "Syrian Arab Republic"
                        },
                        new
                        {
                            Code = "SZ",
                            Continent = "Africa",
                            CurrencyCode = "SZL",
                            Name = "Eswatini"
                        },
                        new
                        {
                            Code = "TC",
                            Continent = "North America",
                            CurrencyCode = "USD",
                            Name = "Turks and Caicos Islands"
                        },
                        new
                        {
                            Code = "TD",
                            Continent = "Africa",
                            CurrencyCode = "XAF",
                            Name = "Chad"
                        },
                        new
                        {
                            Code = "TF",
                            Continent = "Antarctica",
                            CurrencyCode = "EUR",
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            Code = "TG",
                            Continent = "Africa",
                            CurrencyCode = "XOF",
                            Name = "Togo"
                        },
                        new
                        {
                            Code = "TH",
                            Continent = "Asia",
                            CurrencyCode = "THB",
                            Name = "Thailand"
                        },
                        new
                        {
                            Code = "TJ",
                            Continent = "Asia",
                            CurrencyCode = "TJS",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Code = "TK",
                            Continent = "Oceania",
                            CurrencyCode = "NZD",
                            Name = "Tokelau"
                        },
                        new
                        {
                            Code = "TL",
                            Continent = "Asia",
                            CurrencyCode = "USD",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Code = "TM",
                            Continent = "Asia",
                            CurrencyCode = "TMT",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Code = "TN",
                            Continent = "Africa",
                            CurrencyCode = "TND",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Code = "TO",
                            Continent = "Oceania",
                            CurrencyCode = "TOP",
                            Name = "Tonga"
                        },
                        new
                        {
                            Code = "TR",
                            Continent = "Asia",
                            CurrencyCode = "TRY",
                            Name = "Turkey"
                        },
                        new
                        {
                            Code = "TT",
                            Continent = "North America",
                            CurrencyCode = "TTD",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Code = "TV",
                            Continent = "Oceania",
                            CurrencyCode = "AUD",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Code = "TW",
                            Continent = "Asia",
                            CurrencyCode = "TWD",
                            Name = "Taiwan"
                        },
                        new
                        {
                            Code = "TZ",
                            Continent = "Africa",
                            CurrencyCode = "TZS",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Code = "UA",
                            Continent = "Europe",
                            CurrencyCode = "UAH",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Code = "UG",
                            Continent = "Africa",
                            CurrencyCode = "UGX",
                            Name = "Uganda"
                        },
                        new
                        {
                            Code = "UM",
                            Continent = "Oceania",
                            CurrencyCode = "USD",
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            Code = "US",
                            Continent = "North America",
                            CurrencyCode = "USD",
                            Name = "United States"
                        },
                        new
                        {
                            Code = "UY",
                            Continent = "South America",
                            CurrencyCode = "UYU",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Code = "UZ",
                            Continent = "Asia",
                            CurrencyCode = "UZS",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Code = "VA",
                            Continent = "Europe",
                            CurrencyCode = "EUR",
                            Name = "Holy See (Vatican City State)"
                        },
                        new
                        {
                            Code = "VC",
                            Continent = "North America",
                            CurrencyCode = "XCD",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Code = "VE",
                            Continent = "South America",
                            CurrencyCode = "VES",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Code = "VG",
                            Continent = "North America",
                            CurrencyCode = "USD",
                            Name = "Virgin Islands (British)"
                        },
                        new
                        {
                            Code = "VI",
                            Continent = "North America",
                            CurrencyCode = "USD",
                            Name = "Virgin Islands (U.S.)"
                        },
                        new
                        {
                            Code = "VN",
                            Continent = "Asia",
                            CurrencyCode = "VND",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Code = "VU",
                            Continent = "Oceania",
                            CurrencyCode = "VUV",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Code = "WF",
                            Continent = "Oceania",
                            CurrencyCode = "XPF",
                            Name = "Wallis and Futuna"
                        },
                        new
                        {
                            Code = "WS",
                            Continent = "Oceania",
                            CurrencyCode = "WST",
                            Name = "Samoa"
                        },
                        new
                        {
                            Code = "YE",
                            Continent = "Asia",
                            CurrencyCode = "YER",
                            Name = "Yemen"
                        },
                        new
                        {
                            Code = "YT",
                            Continent = "Africa",
                            CurrencyCode = "EUR",
                            Name = "Mayotte"
                        },
                        new
                        {
                            Code = "ZA",
                            Continent = "Africa",
                            CurrencyCode = "ZAR",
                            Name = "South Africa"
                        },
                        new
                        {
                            Code = "ZM",
                            Continent = "Africa",
                            CurrencyCode = "ZMW",
                            Name = "Zambia"
                        },
                        new
                        {
                            Code = "ZW",
                            Continent = "Africa",
                            CurrencyCode = "ZWL",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Description = "Handles recruitment, payroll, employee relations, and organizational policies.",
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            Description = "Oversees infrastructure, software development, cybersecurity, and IT support.",
                            Name = "IT"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            Description = "Manages budgeting, forecasting, accounting, and financial reporting.",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 1,
                            Description = "Develops brand strategy, campaigns, and customer outreach initiatives.",
                            Name = "Marketing"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.DepartmentBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BonusPool")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateAllocated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDistributed")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalBudget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentBudgets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BonusPool = 5000m,
                            DateAllocated = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            IsDistributed = false,
                            TotalBudget = 50000m
                        },
                        new
                        {
                            Id = 2,
                            BonusPool = 10000m,
                            DateAllocated = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            IsDistributed = false,
                            TotalBudget = 80000m
                        },
                        new
                        {
                            Id = 3,
                            BonusPool = 7000m,
                            DateAllocated = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            IsDistributed = false,
                            TotalBudget = 60000m
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseSalary = 6000m,
                            DepartmentId = 2,
                            Description = "Develops and maintains enterprise-grade software applications.",
                            Title = "Software Engineer"
                        },
                        new
                        {
                            Id = 2,
                            BaseSalary = 4500m,
                            DepartmentId = 1,
                            Description = "Manages employee onboarding, benefits, and HR compliance.",
                            Title = "HR Specialist"
                        },
                        new
                        {
                            Id = 3,
                            BaseSalary = 5000m,
                            DepartmentId = 3,
                            Description = "Analyzes financial data and prepares budget reports for strategic decisions.",
                            Title = "Financial Analyst"
                        },
                        new
                        {
                            Id = 4,
                            BaseSalary = 4000m,
                            DepartmentId = 4,
                            Description = "Supports marketing campaigns, communications, and brand development.",
                            Title = "Marketing Coordinator"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Bonus")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Taxes")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bonus = 200m,
                            Notes = "Full salary + punctuality bonus",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005"),
                            Salary = 2800m,
                            Taxes = 100m
                        },
                        new
                        {
                            Id = 2,
                            Bonus = 100m,
                            Notes = "Late arrivals detected, adjusted salary and reduced bonus",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06"),
                            Salary = 5000m,
                            Taxes = 240m
                        },
                        new
                        {
                            Id = 3,
                            Bonus = 100m,
                            Notes = "One absence day deducted",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07"),
                            Salary = 4700m,
                            Taxes = 190m
                        },
                        new
                        {
                            Id = 4,
                            Bonus = 400m,
                            Notes = "Early leaves adjusted, bonus for extra work on other days",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08"),
                            Salary = 6900m,
                            Taxes = 280m
                        },
                        new
                        {
                            Id = 5,
                            Bonus = 100m,
                            Notes = "Standard payout",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("30c2adf9-9ab8-4c59-b356-2f8bb6c82d09"),
                            Salary = 4200m,
                            Taxes = 150m
                        },
                        new
                        {
                            Id = 6,
                            Bonus = 400m,
                            Notes = "Exceeded marketing targets",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("a73cb7de-df18-4b6e-a573-0dcf1f703e10"),
                            Salary = 6500m,
                            Taxes = 250m
                        },
                        new
                        {
                            Id = 7,
                            Bonus = 0m,
                            Notes = "One day unpaid leave adjustment",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("cf9f7b3e-6cdb-4b9a-a0b4-4e2f7d527e11"),
                            Salary = 3000m,
                            Taxes = 120m
                        },
                        new
                        {
                            Id = 8,
                            Bonus = 350m,
                            Notes = "On-time delivery and initiative bonus",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("a802de4b-6a4a-4e15-a8c3-41f5a6c8d012"),
                            Salary = 6000m,
                            Taxes = 200m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Ceo", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Ceo")
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Account.Ceo", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Employee", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Employee")
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Account.Employee", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Country");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Manager", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Manager")
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Account.Manager", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("Managers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.AttendanceEntry", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "User")
                        .WithMany("AttendanceEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.Ceo", "Ceo")
                        .WithOne()
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Company", "CeoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ceo");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.DepartmentBudget", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("DepartmentBudgets")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("Jobs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Payment", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "Recipient")
                        .WithMany("Payments")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", b =>
                {
                    b.Navigation("AttendanceEntries");

                    b.Navigation("Ceo");

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Country", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.Navigation("DepartmentBudgets");

                    b.Navigation("Jobs");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
