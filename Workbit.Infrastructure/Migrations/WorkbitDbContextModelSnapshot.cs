// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workbit.Infrastructure.Database;

#nullable disable

namespace Workbit.Infrastructure.Migrations
{
    [DbContext(typeof(WorkbitDbContext))]
    partial class WorkbitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a2f4b30-c2fa-4c77-bf3a-9b6a4cf11801"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "589919a1-a1ab-415e-b2e8-a8d918de60f9",
                            DateOfBirth = new DateTime(1980, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.m.lewis@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Lewis",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.M.LEWIS@WORKBIT.COM",
                            NormalizedUserName = "JOHN.M.LEWIS",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtpZ8InsMk83gt/FmdNXwUosX7nV/tvGtbrK4nVHG5FxHb8+EGDUFY+KfpZggUNBg==",
                            PhoneNumber = "+1-555-214-6998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4ee9581-05c5-43dc-8ea2-7286670d5c60",
                            TwoFactorEnabled = false,
                            UserName = "john.m.lewis"
                        },
                        new
                        {
                            Id = new Guid("f83d8c21-0b43-4b15-8fd1-20f4e5c72f02"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae2e4a5b-b631-4b4a-86fb-df5f715adc26",
                            DateOfBirth = new DateTime(1982, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lisa.r.anderson@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Lisa",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "LISA.R.ANDERSON@WORKBIT.COM",
                            NormalizedUserName = "LISA.R.ANDERSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEJvciTPnlYfvGmmN0sDO1Vbe3hHztzlXhzbpQ2yyvw/LEdEF5HKhXGuTz2ojrxpylg==",
                            PhoneNumber = "+1-555-380-6971",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44545281-1a7c-4ac1-b09a-270857b02675",
                            TwoFactorEnabled = false,
                            UserName = "lisa.r.anderson"
                        },
                        new
                        {
                            Id = new Guid("64d07af7-8ed1-4620-b34d-bd0a4cb81d03"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c25bdc3f-315b-44b7-b753-246e95c1b55b",
                            DateOfBirth = new DateTime(1978, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carl.t.morgan@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Carl",
                            LastName = "Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARL.T.MORGAN@WORKBIT.COM",
                            NormalizedUserName = "CARL.T.MORGAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDX2dxkPd36jqHpKBa2ePuvpc3pHmu9z3D0Kiem/XH/xAaHa3cXngeKB/A8oktBgFQ==",
                            PhoneNumber = "+1-555-528-6881",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ba8bb2a-b1b9-48c2-8086-3c4e52cc8bb0",
                            TwoFactorEnabled = false,
                            UserName = "carl.t.morgan"
                        },
                        new
                        {
                            Id = new Guid("b0cf2834-19c5-43f5-b29e-9bb85a5a5d04"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c3c9255-f44a-477b-9991-9c55b36c505c",
                            DateOfBirth = new DateTime(1985, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nina.v.hughes@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Nina",
                            LastName = "Hughes",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINA.V.HUGHES@WORKBIT.COM",
                            NormalizedUserName = "NINA.V.HUGHES",
                            PasswordHash = "AQAAAAIAAYagAAAAEGVBzhc3ZOVXXmvvTdcYgNuzKsG78nRkBB4uMhqpL40eGz24DZA2HZexN1Ta/5x/ug==",
                            PhoneNumber = "+1-555-679-4615",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6bd09f61-c719-4814-aee5-2ed88cd35368",
                            TwoFactorEnabled = false,
                            UserName = "nina.v.hughes"
                        },
                        new
                        {
                            Id = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8604d0df-9a3c-487e-88ae-d1cbfbbb421b",
                            DateOfBirth = new DateTime(1995, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.k.watson@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Watson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.K.WATSON@WORKBIT.COM",
                            NormalizedUserName = "ALICE.K.WATSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEKuCD9YLpFKNVcr1U08zsCQlGk2ZQGVy0m7Pi13YnVjU2izecGsf2/b4+SJUlMECtA==",
                            PhoneNumber = "+1-555-736-9670",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7012131-499d-4bd8-8c27-f0653caba574",
                            TwoFactorEnabled = false,
                            UserName = "alice.k.watson"
                        },
                        new
                        {
                            Id = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b7edd35-e9da-4c61-820a-37613483ffd7",
                            DateOfBirth = new DateTime(1994, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.c.thomas@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.C.THOMAS@WORKBIT.COM",
                            NormalizedUserName = "BOB.C.THOMAS",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmq8K5qi0d+GFP1lzPQb9ISlGSvE4k0+l9B9pRVFq7PIkL431cd1LGfTtlZGSmI3w==",
                            PhoneNumber = "+1-555-833-7506",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a5ac456-3af4-42d2-8ead-1729f1fb71ea",
                            TwoFactorEnabled = false,
                            UserName = "bob.c.thomas"
                        },
                        new
                        {
                            Id = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13ef2b30-a95a-4a66-b6f7-d01567311b18",
                            DateOfBirth = new DateTime(1992, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "claire.b.james@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Claire",
                            LastName = "James",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLAIRE.B.JAMES@WORKBIT.COM",
                            NormalizedUserName = "CLAIRE.B.JAMES",
                            PasswordHash = "AQAAAAIAAYagAAAAEIIdMPANa3nkcsQDiblZDbza59QIKipxBWsTGCzAFLI2MrSRcTpRczu3CbHnpfJjPQ==",
                            PhoneNumber = "+1-555-441-6410",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d40eff75-310e-4123-bc10-e03a49746bf7",
                            TwoFactorEnabled = false,
                            UserName = "claire.b.james"
                        },
                        new
                        {
                            Id = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6292f197-bf15-4c18-830e-e42b48dd0c81",
                            DateOfBirth = new DateTime(1993, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dave.r.walker@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Dave",
                            LastName = "Walker",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVE.R.WALKER@WORKBIT.COM",
                            NormalizedUserName = "DAVE.R.WALKER",
                            PasswordHash = "AQAAAAIAAYagAAAAENOBCQLMptWp0E49H3tIpkRGsVchqQjt6KQmxfN9yz6aaIWa0KO4KLMPG50mjf6p1Q==",
                            PhoneNumber = "+1-555-735-3311",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d772792c-9a0c-4a67-94df-71da2e67d784",
                            TwoFactorEnabled = false,
                            UserName = "dave.r.walker"
                        },
                        new
                        {
                            Id = new Guid("30c2adf9-9ab8-4c59-b356-2f8bb6c82d09"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac4b7eed-543b-4a60-b311-5d2cc98c9005",
                            DateOfBirth = new DateTime(1991, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.d.young@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            LastName = "Young",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.D.YOUNG@WORKBIT.COM",
                            NormalizedUserName = "EMILY.D.YOUNG",
                            PasswordHash = "AQAAAAIAAYagAAAAEHO7b3ZOp6DC0u9GdTuFyI8bUBguwlmcPbU5324S16flnxvez1DwplRSs9b2cUrzVQ==",
                            PhoneNumber = "+1-555-900-5684",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef420c90-46c2-4d94-a468-2f78c38b7f9c",
                            TwoFactorEnabled = false,
                            UserName = "emily.d.young"
                        },
                        new
                        {
                            Id = new Guid("a73cb7de-df18-4b6e-a573-0dcf1f703e10"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0089a000-30e6-4abb-8eee-5ae98f3d5ff4",
                            DateOfBirth = new DateTime(1990, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "frank.h.scott@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Frank",
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.H.SCOTT@WORKBIT.COM",
                            NormalizedUserName = "FRANK.H.SCOTT",
                            PasswordHash = "AQAAAAIAAYagAAAAEJFsQQkdJ3m2go22Phh+GYlusdTwIgmvMQuReTCg9AtsYtdxbikCbzwWiR536NQF8A==",
                            PhoneNumber = "+1-555-960-6850",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "477d148d-dfed-482f-aa75-658ba69ccc11",
                            TwoFactorEnabled = false,
                            UserName = "frank.h.scott"
                        },
                        new
                        {
                            Id = new Guid("cf9f7b3e-6cdb-4b9a-a0b4-4e2f7d527e11"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4dbdb579-69a6-442a-ae10-fc673765723f",
                            DateOfBirth = new DateTime(1996, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "grace.l.adams@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Grace",
                            LastName = "Adams",
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.L.ADAMS@WORKBIT.COM",
                            NormalizedUserName = "GRACE.L.ADAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAEFUeYsvC2U96zQC0NCeXsLdg41dPf9cn4voEyDfyvf+FZC7qfunC+s/ClXA7JjavoQ==",
                            PhoneNumber = "+1-555-616-5225",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96202423-884e-4d87-9c9e-13dbb4d8a2a9",
                            TwoFactorEnabled = false,
                            UserName = "grace.l.adams"
                        },
                        new
                        {
                            Id = new Guid("a802de4b-6a4a-4e15-a8c3-41f5a6c8d012"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fde2b4bc-b392-456a-9e7a-854ec8564062",
                            DateOfBirth = new DateTime(1997, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "harry.n.brooks@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Harry",
                            LastName = "Brooks",
                            LockoutEnabled = false,
                            NormalizedEmail = "HARRY.N.BROOKS@WORKBIT.COM",
                            NormalizedUserName = "HARRY.N.BROOKS",
                            PasswordHash = "AQAAAAIAAYagAAAAEKYUYQIdCeTwME6nQvuHzSpBoWVtoVMMfImCiV8oI/yhGSKixCo9wsIKa43TB1lczA==",
                            PhoneNumber = "+1-555-113-7310",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b989800f-538f-43a3-9246-793c9a938e44",
                            TwoFactorEnabled = false,
                            UserName = "harry.n.brooks"
                        },
                        new
                        {
                            Id = new Guid("d5e7f9a2-0ac3-4b6d-8c64-6fd8e4c0c013"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a00ef335-d1bf-4da0-8c26-9daa76aeeae4",
                            DateOfBirth = new DateTime(1994, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMINADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC274G7ZVef/xePwvIfzWyLbFFuLkAx9su7EvLBYU+SkXV/b43N3ZBmM28im/e6k3g==",
                            PhoneNumber = "+1-555-455-4853",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45e48525-252e-4828-85ae-f049be3c34ac",
                            TwoFactorEnabled = false,
                            UserName = "adminadmin"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Ceo", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("Ceos");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("9a2f4b30-c2fa-4c77-bf3a-9b6a4cf11801")
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Employee", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId");

                    b.HasIndex("JobId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005"),
                            JobId = 1,
                            Level = 2
                        },
                        new
                        {
                            ApplicationUserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06"),
                            JobId = 1,
                            Level = 1
                        },
                        new
                        {
                            ApplicationUserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07"),
                            JobId = 2,
                            Level = 4
                        },
                        new
                        {
                            ApplicationUserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08"),
                            JobId = 2,
                            Level = 3
                        },
                        new
                        {
                            ApplicationUserId = new Guid("30c2adf9-9ab8-4c59-b356-2f8bb6c82d09"),
                            JobId = 3,
                            Level = 2
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a73cb7de-df18-4b6e-a573-0dcf1f703e10"),
                            JobId = 3,
                            Level = 1
                        },
                        new
                        {
                            ApplicationUserId = new Guid("cf9f7b3e-6cdb-4b9a-a0b4-4e2f7d527e11"),
                            JobId = 4,
                            Level = 3
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a802de4b-6a4a-4e15-a8c3-41f5a6c8d012"),
                            JobId = 4,
                            Level = 4
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Manager", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("f83d8c21-0b43-4b15-8fd1-20f4e5c72f02"),
                            DepartmentId = 1
                        },
                        new
                        {
                            ApplicationUserId = new Guid("64d07af7-8ed1-4620-b34d-bd0a4cb81d03"),
                            DepartmentId = 2
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b0cf2834-19c5-43f5-b29e-9bb85a5a5d04"),
                            DepartmentId = 3
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.AttendanceEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Timestamp = new DateTime(2025, 7, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 2,
                            Timestamp = new DateTime(2025, 7, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 3,
                            Timestamp = new DateTime(2025, 7, 14, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 4,
                            Timestamp = new DateTime(2025, 7, 14, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 5,
                            Timestamp = new DateTime(2025, 7, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 6,
                            Timestamp = new DateTime(2025, 7, 14, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 7,
                            Timestamp = new DateTime(2025, 7, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 8,
                            Timestamp = new DateTime(2025, 7, 14, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 9,
                            Timestamp = new DateTime(2025, 7, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 10,
                            Timestamp = new DateTime(2025, 7, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 11,
                            Timestamp = new DateTime(2025, 7, 15, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 12,
                            Timestamp = new DateTime(2025, 7, 15, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 13,
                            Timestamp = new DateTime(2025, 7, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 14,
                            Timestamp = new DateTime(2025, 7, 15, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 15,
                            Timestamp = new DateTime(2025, 7, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 16,
                            Timestamp = new DateTime(2025, 7, 15, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 17,
                            Timestamp = new DateTime(2025, 7, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 18,
                            Timestamp = new DateTime(2025, 7, 16, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 19,
                            Timestamp = new DateTime(2025, 7, 16, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 20,
                            Timestamp = new DateTime(2025, 7, 16, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 21,
                            Timestamp = new DateTime(2025, 7, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 22,
                            Timestamp = new DateTime(2025, 7, 16, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 23,
                            Timestamp = new DateTime(2025, 7, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 24,
                            Timestamp = new DateTime(2025, 7, 17, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 25,
                            Timestamp = new DateTime(2025, 7, 17, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 26,
                            Timestamp = new DateTime(2025, 7, 17, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 27,
                            Timestamp = new DateTime(2025, 7, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 28,
                            Timestamp = new DateTime(2025, 7, 17, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 29,
                            Timestamp = new DateTime(2025, 7, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 30,
                            Timestamp = new DateTime(2025, 7, 17, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 31,
                            Timestamp = new DateTime(2025, 7, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 32,
                            Timestamp = new DateTime(2025, 7, 18, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 33,
                            Timestamp = new DateTime(2025, 7, 18, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 34,
                            Timestamp = new DateTime(2025, 7, 18, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 35,
                            Timestamp = new DateTime(2025, 7, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 36,
                            Timestamp = new DateTime(2025, 7, 18, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 37,
                            Timestamp = new DateTime(2025, 7, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 38,
                            Timestamp = new DateTime(2025, 7, 18, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("CeoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CeoId")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Business Blvd, New York, NY, USA",
                            CeoId = new Guid("9a2f4b30-c2fa-4c77-bf3a-9b6a4cf11801"),
                            ContactPhone = "+1-555-0000",
                            Name = "Workbit Solutions Inc."
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Description = "Handles recruitment, payroll, employee relations, and organizational policies.",
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            Description = "Oversees infrastructure, software development, cybersecurity, and IT support.",
                            Name = "IT"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            Description = "Manages budgeting, forecasting, accounting, and financial reporting.",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 1,
                            Description = "Develops brand strategy, campaigns, and customer outreach initiatives.",
                            Name = "Marketing"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.DepartmentBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BonusPool")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateAllocated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDistributed")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalBudget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentBudgets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BonusPool = 5000m,
                            DateAllocated = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            IsDistributed = false,
                            TotalBudget = 50000m
                        },
                        new
                        {
                            Id = 2,
                            BonusPool = 10000m,
                            DateAllocated = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            IsDistributed = false,
                            TotalBudget = 80000m
                        },
                        new
                        {
                            Id = 3,
                            BonusPool = 7000m,
                            DateAllocated = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            IsDistributed = false,
                            TotalBudget = 60000m
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseSalary = 6000m,
                            DepartmentId = 2,
                            Description = "Develops and maintains enterprise-grade software applications.",
                            Title = "Software Engineer"
                        },
                        new
                        {
                            Id = 2,
                            BaseSalary = 4500m,
                            DepartmentId = 1,
                            Description = "Manages employee onboarding, benefits, and HR compliance.",
                            Title = "HR Specialist"
                        },
                        new
                        {
                            Id = 3,
                            BaseSalary = 5000m,
                            DepartmentId = 3,
                            Description = "Analyzes financial data and prepares budget reports for strategic decisions.",
                            Title = "Financial Analyst"
                        },
                        new
                        {
                            Id = 4,
                            BaseSalary = 4000m,
                            DepartmentId = 4,
                            Description = "Supports marketing campaigns, communications, and brand development.",
                            Title = "Marketing Coordinator"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Bonus")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Taxes")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bonus = 200m,
                            Notes = "Full salary + punctuality bonus",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005"),
                            Salary = 2800m,
                            Taxes = 100m
                        },
                        new
                        {
                            Id = 2,
                            Bonus = 100m,
                            Notes = "Late arrivals detected, adjusted salary and reduced bonus",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06"),
                            Salary = 5000m,
                            Taxes = 240m
                        },
                        new
                        {
                            Id = 3,
                            Bonus = 100m,
                            Notes = "One absence day deducted",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07"),
                            Salary = 4700m,
                            Taxes = 190m
                        },
                        new
                        {
                            Id = 4,
                            Bonus = 400m,
                            Notes = "Early leaves adjusted, bonus for extra work on other days",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08"),
                            Salary = 6900m,
                            Taxes = 280m
                        },
                        new
                        {
                            Id = 5,
                            Bonus = 100m,
                            Notes = "Standard payout",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("30c2adf9-9ab8-4c59-b356-2f8bb6c82d09"),
                            Salary = 4200m,
                            Taxes = 150m
                        },
                        new
                        {
                            Id = 6,
                            Bonus = 400m,
                            Notes = "Exceeded marketing targets",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("a73cb7de-df18-4b6e-a573-0dcf1f703e10"),
                            Salary = 6500m,
                            Taxes = 250m
                        },
                        new
                        {
                            Id = 7,
                            Bonus = 0m,
                            Notes = "One day unpaid leave adjustment",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("cf9f7b3e-6cdb-4b9a-a0b4-4e2f7d527e11"),
                            Salary = 3000m,
                            Taxes = 120m
                        },
                        new
                        {
                            Id = 8,
                            Bonus = 350m,
                            Notes = "On-time delivery and initiative bonus",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("a802de4b-6a4a-4e15-a8c3-41f5a6c8d012"),
                            Salary = 6000m,
                            Taxes = 200m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Ceo", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Ceo")
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Account.Ceo", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Employee", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Employee")
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Account.Employee", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Manager", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Manager")
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Account.Manager", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("Managers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.AttendanceEntry", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "User")
                        .WithMany("AttendanceEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.Ceo", "Ceo")
                        .WithOne()
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Company", "CeoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ceo");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.DepartmentBudget", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("DepartmentBudgets")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("Jobs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Payment", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "Recipient")
                        .WithMany("Payments")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", b =>
                {
                    b.Navigation("AttendanceEntries");

                    b.Navigation("Ceo");

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.Navigation("DepartmentBudgets");

                    b.Navigation("Jobs");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
