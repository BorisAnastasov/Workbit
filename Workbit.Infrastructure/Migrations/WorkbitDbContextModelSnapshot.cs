// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workbit.Infrastructure.Database;

#nullable disable

namespace Workbit.Infrastructure.Migrations
{
    [DbContext(typeof(WorkbitDbContext))]
    partial class WorkbitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a2f4b30-c2fa-4c77-bf3a-9b6a4cf11801"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6dca5967-5f49-405a-8a44-8dcf0851bd26",
                            DateOfBirth = new DateTime(1980, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.m.lewis@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Lewis",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.M.LEWIS@WORKBIT.COM",
                            NormalizedUserName = "JOHN.M.LEWIS",
                            PasswordHash = "AQAAAAIAAYagAAAAEL+CVbynxpE7uIJTVfsZQ7PfYb1orQERtqP3P4ZudoQfZOZOtevL73OME3T8G32Udg==",
                            PhoneNumber = "+1-555-470-4911",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e42794d6-851e-4675-b262-be1933d2fcec",
                            TwoFactorEnabled = false,
                            UserName = "john.m.lewis"
                        },
                        new
                        {
                            Id = new Guid("f83d8c21-0b43-4b15-8fd1-20f4e5c72f02"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a712b3b5-5213-456d-afd3-197c96ac7b6e",
                            DateOfBirth = new DateTime(1982, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lisa.r.anderson@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Lisa",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "LISA.R.ANDERSON@WORKBIT.COM",
                            NormalizedUserName = "LISA.R.ANDERSON",
                            PasswordHash = "AQAAAAIAAYagAAAAELnVjmVWE+MAzYhEhen8v4No6020VFNdLkoMbJbHhiZW9MgQ/ij1Rqn563+cBV26BQ==",
                            PhoneNumber = "+1-555-719-5678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64692ecc-4892-41b6-bea6-cf7fef8bbd3d",
                            TwoFactorEnabled = false,
                            UserName = "lisa.r.anderson"
                        },
                        new
                        {
                            Id = new Guid("64d07af7-8ed1-4620-b34d-bd0a4cb81d03"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a68569f-d269-4f2e-a5f7-59da325825fb",
                            DateOfBirth = new DateTime(1978, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carl.t.morgan@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Carl",
                            LastName = "Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARL.T.MORGAN@WORKBIT.COM",
                            NormalizedUserName = "CARL.T.MORGAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEP+getMSD7325iKI/D/24wDNORJItMNaIvvdD88adC73XfmWatUwRusElAQ9V/rbow==",
                            PhoneNumber = "+1-555-478-9439",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b7c33a3-7fc4-498e-b379-ceafaa83ab23",
                            TwoFactorEnabled = false,
                            UserName = "carl.t.morgan"
                        },
                        new
                        {
                            Id = new Guid("b0cf2834-19c5-43f5-b29e-9bb85a5a5d04"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba856c6f-9fea-4222-800c-553bab01df20",
                            DateOfBirth = new DateTime(1985, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nina.v.hughes@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Nina",
                            LastName = "Hughes",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINA.V.HUGHES@WORKBIT.COM",
                            NormalizedUserName = "NINA.V.HUGHES",
                            PasswordHash = "AQAAAAIAAYagAAAAEIHGaSrHhxbZEhMURkGoWEuYOYSHWXpM3eohL9mVEqFSX0TkYf/LZnGXnFgaiM3s2w==",
                            PhoneNumber = "+1-555-629-2430",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd7a633a-23f3-4a1d-b123-af59a289139e",
                            TwoFactorEnabled = false,
                            UserName = "nina.v.hughes"
                        },
                        new
                        {
                            Id = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1246f2b3-1beb-4190-97e9-c39745544718",
                            DateOfBirth = new DateTime(1995, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.k.watson@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Watson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.K.WATSON@WORKBIT.COM",
                            NormalizedUserName = "ALICE.K.WATSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEJKa9N/ZDugZoCjB9fWbEzIykr6qoxj8rTr6v3afYlqEjSLkMFs4bmNeP4k80geA5Q==",
                            PhoneNumber = "+1-555-584-8591",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "159cada7-7ce2-4a1e-bf32-0ba7714653af",
                            TwoFactorEnabled = false,
                            UserName = "alice.k.watson"
                        },
                        new
                        {
                            Id = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5cd6899-26c7-4835-890d-70bd7e9efece",
                            DateOfBirth = new DateTime(1994, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.c.thomas@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.C.THOMAS@WORKBIT.COM",
                            NormalizedUserName = "BOB.C.THOMAS",
                            PasswordHash = "AQAAAAIAAYagAAAAEHnbmHPkb8Bd+6Ow4o5+w1ptbWq2Ji0g+mFLn504VRxvot9LjtmLpW4ArhHB/pKDmg==",
                            PhoneNumber = "+1-555-620-4611",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fcac044c-8bef-4b5b-af87-ce3679679880",
                            TwoFactorEnabled = false,
                            UserName = "bob.c.thomas"
                        },
                        new
                        {
                            Id = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79f8a94d-268f-4597-917d-4fce0ca6d014",
                            DateOfBirth = new DateTime(1992, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "claire.b.james@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Claire",
                            LastName = "James",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLAIRE.B.JAMES@WORKBIT.COM",
                            NormalizedUserName = "CLAIRE.B.JAMES",
                            PasswordHash = "AQAAAAIAAYagAAAAEI+a8SGhd5Zhxb7hxtV2cOyXIhiB11VKH8wlWz7ZKxauEthSxAJT6BO2KMd1Y/ZRGg==",
                            PhoneNumber = "+1-555-553-7025",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89687ffa-f98d-43b6-bbb7-eac3c9c241fe",
                            TwoFactorEnabled = false,
                            UserName = "claire.b.james"
                        },
                        new
                        {
                            Id = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93e193b2-0888-404e-b0c6-5fc1c4c49023",
                            DateOfBirth = new DateTime(1993, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dave.r.walker@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Dave",
                            LastName = "Walker",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVE.R.WALKER@WORKBIT.COM",
                            NormalizedUserName = "DAVE.R.WALKER",
                            PasswordHash = "AQAAAAIAAYagAAAAEIgxUmB2aeSPQTyCESJwauBhQPxcfeoUCjcP1xIKk6YpdMjHp2LSDY5yUDzW4NPy6w==",
                            PhoneNumber = "+1-555-630-8459",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3cb3fe8-a1e0-4a09-89eb-c075f9df8cae",
                            TwoFactorEnabled = false,
                            UserName = "dave.r.walker"
                        },
                        new
                        {
                            Id = new Guid("30c2adf9-9ab8-4c59-b356-2f8bb6c82d09"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf30d559-1921-415c-8ade-c4c1ed4386a1",
                            DateOfBirth = new DateTime(1991, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.d.young@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            LastName = "Young",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.D.YOUNG@WORKBIT.COM",
                            NormalizedUserName = "EMILY.D.YOUNG",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdg7IzbxUt946TrxS9KHwtHHMoAsueoF6lH+SpEyVnLVkSp9rGDRf22GaR5IqxlpA==",
                            PhoneNumber = "+1-555-326-5405",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c764ed5-e28c-43eb-8707-92671dd2dc99",
                            TwoFactorEnabled = false,
                            UserName = "emily.d.young"
                        },
                        new
                        {
                            Id = new Guid("a73cb7de-df18-4b6e-a573-0dcf1f703e10"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be572258-28a0-4444-adad-c636c250efc9",
                            DateOfBirth = new DateTime(1990, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "frank.h.scott@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Frank",
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.H.SCOTT@WORKBIT.COM",
                            NormalizedUserName = "FRANK.H.SCOTT",
                            PasswordHash = "AQAAAAIAAYagAAAAEGZd1+RSVPxM+SAduXpSnqLj2NE9gOYf7A25ja5tA0SCk8kDunqhBGQw+C29aKz+xw==",
                            PhoneNumber = "+1-555-518-7748",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c3f8df9-73c7-4bbf-9139-2148d40e3545",
                            TwoFactorEnabled = false,
                            UserName = "frank.h.scott"
                        },
                        new
                        {
                            Id = new Guid("cf9f7b3e-6cdb-4b9a-a0b4-4e2f7d527e11"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcec6276-fc20-49da-ae11-f52a8e4607b5",
                            DateOfBirth = new DateTime(1996, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "grace.l.adams@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Grace",
                            LastName = "Adams",
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.L.ADAMS@WORKBIT.COM",
                            NormalizedUserName = "GRACE.L.ADAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAELPlMusKiT5yq3BUeK2Loxc2m/CqLwAZGqYZq4d9RTbGhWA4qvSOGwyElqMznC36SA==",
                            PhoneNumber = "+1-555-627-8684",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "491edab4-6311-423f-bc4d-03d4a33c500e",
                            TwoFactorEnabled = false,
                            UserName = "grace.l.adams"
                        },
                        new
                        {
                            Id = new Guid("a802de4b-6a4a-4e15-a8c3-41f5a6c8d012"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3f43038-b4ec-4063-805d-605a96f5df35",
                            DateOfBirth = new DateTime(1997, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "harry.n.brooks@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Harry",
                            LastName = "Brooks",
                            LockoutEnabled = false,
                            NormalizedEmail = "HARRY.N.BROOKS@WORKBIT.COM",
                            NormalizedUserName = "HARRY.N.BROOKS",
                            PasswordHash = "AQAAAAIAAYagAAAAEHKcVQNQFqlT5yoLrO5hoQNeoN9/2zAp3zIG/47/d/KhOydZPKRzK235o4NZ40GCZw==",
                            PhoneNumber = "+1-555-731-1822",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ce93e8a-072e-4d64-940d-b594ef7f2181",
                            TwoFactorEnabled = false,
                            UserName = "harry.n.brooks"
                        },
                        new
                        {
                            Id = new Guid("d5e7f9a2-0ac3-4b6d-8c64-6fd8e4c0c013"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddd7f289-05a0-4b81-a5f7-86fc13686b72",
                            DateOfBirth = new DateTime(1994, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMINADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEI1uJDa0Np5aWlwFPW085+hu2HY5yk1RZNXswKm7BDxAUGuwEe1dq31NYf7nW+f9lw==",
                            PhoneNumber = "+1-555-366-4216",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac4ffddf-c3b1-46d0-b91a-1206e3fe9f63",
                            TwoFactorEnabled = false,
                            UserName = "adminadmin"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Ceo", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("Ceos");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("9a2f4b30-c2fa-4c77-bf3a-9b6a4cf11801")
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Employee", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId");

                    b.HasIndex("JobId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005"),
                            JobId = 1,
                            Level = 2
                        },
                        new
                        {
                            ApplicationUserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06"),
                            JobId = 1,
                            Level = 1
                        },
                        new
                        {
                            ApplicationUserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07"),
                            JobId = 2,
                            Level = 4
                        },
                        new
                        {
                            ApplicationUserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08"),
                            JobId = 2,
                            Level = 3
                        },
                        new
                        {
                            ApplicationUserId = new Guid("30c2adf9-9ab8-4c59-b356-2f8bb6c82d09"),
                            JobId = 3,
                            Level = 2
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a73cb7de-df18-4b6e-a573-0dcf1f703e10"),
                            JobId = 3,
                            Level = 1
                        },
                        new
                        {
                            ApplicationUserId = new Guid("cf9f7b3e-6cdb-4b9a-a0b4-4e2f7d527e11"),
                            JobId = 4,
                            Level = 3
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a802de4b-6a4a-4e15-a8c3-41f5a6c8d012"),
                            JobId = 4,
                            Level = 4
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Manager", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("f83d8c21-0b43-4b15-8fd1-20f4e5c72f02"),
                            DepartmentId = 1
                        },
                        new
                        {
                            ApplicationUserId = new Guid("64d07af7-8ed1-4620-b34d-bd0a4cb81d03"),
                            DepartmentId = 2
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b0cf2834-19c5-43f5-b29e-9bb85a5a5d04"),
                            DepartmentId = 3
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.AttendanceEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Timestamp = new DateTime(2025, 7, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 2,
                            Timestamp = new DateTime(2025, 7, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 3,
                            Timestamp = new DateTime(2025, 7, 14, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 4,
                            Timestamp = new DateTime(2025, 7, 14, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 5,
                            Timestamp = new DateTime(2025, 7, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 6,
                            Timestamp = new DateTime(2025, 7, 14, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 7,
                            Timestamp = new DateTime(2025, 7, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 8,
                            Timestamp = new DateTime(2025, 7, 14, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 9,
                            Timestamp = new DateTime(2025, 7, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 10,
                            Timestamp = new DateTime(2025, 7, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 11,
                            Timestamp = new DateTime(2025, 7, 15, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 12,
                            Timestamp = new DateTime(2025, 7, 15, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 13,
                            Timestamp = new DateTime(2025, 7, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 14,
                            Timestamp = new DateTime(2025, 7, 15, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 15,
                            Timestamp = new DateTime(2025, 7, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 16,
                            Timestamp = new DateTime(2025, 7, 15, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 17,
                            Timestamp = new DateTime(2025, 7, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 18,
                            Timestamp = new DateTime(2025, 7, 16, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 19,
                            Timestamp = new DateTime(2025, 7, 16, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 20,
                            Timestamp = new DateTime(2025, 7, 16, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 21,
                            Timestamp = new DateTime(2025, 7, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 22,
                            Timestamp = new DateTime(2025, 7, 16, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 23,
                            Timestamp = new DateTime(2025, 7, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 24,
                            Timestamp = new DateTime(2025, 7, 17, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 25,
                            Timestamp = new DateTime(2025, 7, 17, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 26,
                            Timestamp = new DateTime(2025, 7, 17, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 27,
                            Timestamp = new DateTime(2025, 7, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 28,
                            Timestamp = new DateTime(2025, 7, 17, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 29,
                            Timestamp = new DateTime(2025, 7, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 30,
                            Timestamp = new DateTime(2025, 7, 17, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 31,
                            Timestamp = new DateTime(2025, 7, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 32,
                            Timestamp = new DateTime(2025, 7, 18, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005")
                        },
                        new
                        {
                            Id = 33,
                            Timestamp = new DateTime(2025, 7, 18, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 34,
                            Timestamp = new DateTime(2025, 7, 18, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06")
                        },
                        new
                        {
                            Id = 35,
                            Timestamp = new DateTime(2025, 7, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 36,
                            Timestamp = new DateTime(2025, 7, 18, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07")
                        },
                        new
                        {
                            Id = 37,
                            Timestamp = new DateTime(2025, 7, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        },
                        new
                        {
                            Id = 38,
                            Timestamp = new DateTime(2025, 7, 18, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Type = 1,
                            UserId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08")
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("CeoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CeoId")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Business Blvd, New York, NY, USA",
                            CeoId = new Guid("9a2f4b30-c2fa-4c77-bf3a-9b6a4cf11801"),
                            ContactPhone = "+1-555-0000",
                            Name = "Workbit Solutions Inc."
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Description = "Handles recruitment, payroll, employee relations, and organizational policies.",
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            Description = "Oversees infrastructure, software development, cybersecurity, and IT support.",
                            Name = "IT"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            Description = "Manages budgeting, forecasting, accounting, and financial reporting.",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 1,
                            Description = "Develops brand strategy, campaigns, and customer outreach initiatives.",
                            Name = "Marketing"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.DepartmentBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BonusPool")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateAllocated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDistributed")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalBudget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentBudgets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BonusPool = 5000m,
                            DateAllocated = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            IsDistributed = false,
                            TotalBudget = 50000m
                        },
                        new
                        {
                            Id = 2,
                            BonusPool = 10000m,
                            DateAllocated = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            IsDistributed = false,
                            TotalBudget = 80000m
                        },
                        new
                        {
                            Id = 3,
                            BonusPool = 7000m,
                            DateAllocated = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            IsDistributed = false,
                            TotalBudget = 60000m
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseSalary = 6000m,
                            DepartmentId = 2,
                            Description = "Develops and maintains enterprise-grade software applications.",
                            Title = "Software Engineer"
                        },
                        new
                        {
                            Id = 2,
                            BaseSalary = 4500m,
                            DepartmentId = 1,
                            Description = "Manages employee onboarding, benefits, and HR compliance.",
                            Title = "HR Specialist"
                        },
                        new
                        {
                            Id = 3,
                            BaseSalary = 5000m,
                            DepartmentId = 3,
                            Description = "Analyzes financial data and prepares budget reports for strategic decisions.",
                            Title = "Financial Analyst"
                        },
                        new
                        {
                            Id = 4,
                            BaseSalary = 4000m,
                            DepartmentId = 4,
                            Description = "Supports marketing campaigns, communications, and brand development.",
                            Title = "Marketing Coordinator"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Bonus")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Taxes")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bonus = 200m,
                            Notes = "Full salary + punctuality bonus",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("f92e7b0f-5123-40c8-9d28-8834a3c93005"),
                            Salary = 2800m,
                            Taxes = 100m
                        },
                        new
                        {
                            Id = 2,
                            Bonus = 100m,
                            Notes = "Late arrivals detected, adjusted salary and reduced bonus",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("2b06417a-1460-4b10-8454-51069dfb2d06"),
                            Salary = 5000m,
                            Taxes = 240m
                        },
                        new
                        {
                            Id = 3,
                            Bonus = 100m,
                            Notes = "One absence day deducted",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("ac2a1d43-b460-4f4e-8617-c2cfb61a8c07"),
                            Salary = 4700m,
                            Taxes = 190m
                        },
                        new
                        {
                            Id = 4,
                            Bonus = 400m,
                            Notes = "Early leaves adjusted, bonus for extra work on other days",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("90e3b7f8-7088-4b4e-b0fa-847fe4c6bc08"),
                            Salary = 6900m,
                            Taxes = 280m
                        },
                        new
                        {
                            Id = 5,
                            Bonus = 100m,
                            Notes = "Standard payout",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("30c2adf9-9ab8-4c59-b356-2f8bb6c82d09"),
                            Salary = 4200m,
                            Taxes = 150m
                        },
                        new
                        {
                            Id = 6,
                            Bonus = 400m,
                            Notes = "Exceeded marketing targets",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("a73cb7de-df18-4b6e-a573-0dcf1f703e10"),
                            Salary = 6500m,
                            Taxes = 250m
                        },
                        new
                        {
                            Id = 7,
                            Bonus = 0m,
                            Notes = "One day unpaid leave adjustment",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("cf9f7b3e-6cdb-4b9a-a0b4-4e2f7d527e11"),
                            Salary = 3000m,
                            Taxes = 120m
                        },
                        new
                        {
                            Id = 8,
                            Bonus = 350m,
                            Notes = "On-time delivery and initiative bonus",
                            PaymentDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RecipientId = new Guid("a802de4b-6a4a-4e15-a8c3-41f5a6c8d012"),
                            Salary = 6000m,
                            Taxes = 200m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Ceo", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Ceo")
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Account.Ceo", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Employee", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Employee")
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Account.Employee", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Manager", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Manager")
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Account.Manager", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("Managers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.AttendanceEntry", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "User")
                        .WithMany("AttendanceEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.Ceo", "Ceo")
                        .WithOne()
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Company", "CeoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ceo");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.DepartmentBudget", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("DepartmentBudgets")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("Jobs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Payment", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "Recipient")
                        .WithMany("Payments")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", b =>
                {
                    b.Navigation("AttendanceEntries");

                    b.Navigation("Ceo");

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.Navigation("DepartmentBudgets");

                    b.Navigation("Jobs");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
