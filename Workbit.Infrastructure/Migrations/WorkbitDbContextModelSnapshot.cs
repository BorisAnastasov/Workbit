// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workbit.Infrastructure.Database;

#nullable disable

namespace Workbit.Infrastructure.Migrations
{
    [DbContext(typeof(WorkbitDbContext))]
    partial class WorkbitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1111111-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8e226f9-c150-483a-9ac8-0a4c18ab152d",
                            DateOfBirth = new DateTime(1980, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.m.lewis@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Lewis",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.M.LEWIS@WORKBIT.COM",
                            NormalizedUserName = "JOHN.M.LEWIS",
                            PasswordHash = "AQAAAAIAAYagAAAAEIQ7pvzzu+KohgeiU/g7KXQG4ybj5F71V9+kkrCneYC+jinnwArKK3BoYmMIsZytgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d6e951a-3572-4ac9-adb5-3177b22730eb",
                            TwoFactorEnabled = false,
                            UserName = "john.m.lewis"
                        },
                        new
                        {
                            Id = new Guid("a1111111-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9097c60e-a0b7-4dc2-956f-75760fd7be31",
                            DateOfBirth = new DateTime(1982, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lisa.r.anderson@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Lisa",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "LISA.R.ANDERSON@WORKBIT.COM",
                            NormalizedUserName = "LISA.R.ANDERSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEAbrhhJ1mLEjkStRsVAmWumDjTV+bm/20Spo5jF8saDxCYBtZBjxNl/zwCEp7y9ouA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2dc5a46d-da32-4fcb-964e-900c2d1b06c1",
                            TwoFactorEnabled = false,
                            UserName = "lisa.r.anderson"
                        },
                        new
                        {
                            Id = new Guid("a1111111-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb32aee3-533e-41af-9990-8d86758c3807",
                            DateOfBirth = new DateTime(1978, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carl.t.morgan@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Carl",
                            LastName = "Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARL.T.MORGAN@WORKBIT.COM",
                            NormalizedUserName = "CARL.T.MORGAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVhvJkvnn/dhQKVvPAjCi3qfu5pkG40CcQYiiE0WbBwMrmulv0W83AlMtcc3pyHIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "355ca936-3fc1-41ad-9c6f-44853a9f7835",
                            TwoFactorEnabled = false,
                            UserName = "carl.t.morgan"
                        },
                        new
                        {
                            Id = new Guid("a1111111-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0ad2407-8413-455a-bb6f-d78e46ec4a0d",
                            DateOfBirth = new DateTime(1985, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nina.v.hughes@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Nina",
                            LastName = "Hughes",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINA.V.HUGHES@WORKBIT.COM",
                            NormalizedUserName = "NINA.V.HUGHES",
                            PasswordHash = "AQAAAAIAAYagAAAAEFIFZMkEvAWqDuVSFFNTtBmuBhIEaoNvOS9+3vnte1tMM7V9ezqoeTexRrwXDIDoFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ad8c6eb-0067-4b68-ac87-08da05e40752",
                            TwoFactorEnabled = false,
                            UserName = "nina.v.hughes"
                        },
                        new
                        {
                            Id = new Guid("b2222222-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0501dde6-51b7-4e44-aeb6-88dbe6a85bd2",
                            DateOfBirth = new DateTime(1995, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.k.watson@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Watson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.K.WATSON@WORKBIT.COM",
                            NormalizedUserName = "ALICE.K.WATSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEG1TSH7XWgY5FF31EY6h+kpR4Ta23xY1QvB755wHhGba2Vfj8m/xXS+i644MxcNqdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24cea4b7-8812-424a-9b79-dfbe8a6e6bb2",
                            TwoFactorEnabled = false,
                            UserName = "alice.k.watson"
                        },
                        new
                        {
                            Id = new Guid("b2222222-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a53e3146-0ab0-454b-8002-74f3db28384c",
                            DateOfBirth = new DateTime(1994, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.c.thomas@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.C.THOMAS@WORKBIT.COM",
                            NormalizedUserName = "BOB.C.THOMAS",
                            PasswordHash = "AQAAAAIAAYagAAAAEGu7+22uiozvaG1msGUev5wbaAYOJn35Eb5mT89BFglX2k267WLJezwNor2t+WaKsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2b50cea-c55a-4ea9-b95f-807a7d9b954a",
                            TwoFactorEnabled = false,
                            UserName = "bob.c.thomas"
                        },
                        new
                        {
                            Id = new Guid("b2222222-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f92ddfc-2a08-4050-b732-a9c6d444d49e",
                            DateOfBirth = new DateTime(1992, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "claire.b.james@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Claire",
                            LastName = "James",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLAIRE.B.JAMES@WORKBIT.COM",
                            NormalizedUserName = "CLAIRE.B.JAMES",
                            PasswordHash = "AQAAAAIAAYagAAAAEO7lDxERAAi+BWl7ZdUW8Mp0L5w10/mWrtlhy2HuG92I5ZsbHbpEaGrIXY3tBTR20g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb2d33bb-4556-4cb6-8f39-dddca22980a3",
                            TwoFactorEnabled = false,
                            UserName = "claire.b.james"
                        },
                        new
                        {
                            Id = new Guid("b2222222-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fcc1130-5ac4-44ec-8a28-accbc1408758",
                            DateOfBirth = new DateTime(1993, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dave.r.walker@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Dave",
                            LastName = "Walker",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVE.R.WALKER@WORKBIT.COM",
                            NormalizedUserName = "DAVE.R.WALKER",
                            PasswordHash = "AQAAAAIAAYagAAAAED++p+LNKNh25YRFGNCJWSTUTNFEvzqvYxkk5DDcvm1YQx9qNUFMbFMK4DCWiL0JYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e716858-6945-422e-97cc-232a7b3cc9db",
                            TwoFactorEnabled = false,
                            UserName = "dave.r.walker"
                        },
                        new
                        {
                            Id = new Guid("b2222222-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed99e21d-6d9d-4bba-a941-09f5769db8ec",
                            DateOfBirth = new DateTime(1991, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.d.young@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            LastName = "Young",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.D.YOUNG@WORKBIT.COM",
                            NormalizedUserName = "EMILY.D.YOUNG",
                            PasswordHash = "AQAAAAIAAYagAAAAEOnbulCB1c8tW5qoMxWKccBmaFmIcBGP6z+9z3KBfgYN9xNB5/izKBARIwoRr9ZODQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72cc3c1d-c3e7-4baf-ba52-c395c0d08f19",
                            TwoFactorEnabled = false,
                            UserName = "emily.d.young"
                        },
                        new
                        {
                            Id = new Guid("b2222222-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a56879eb-b89a-4a68-a1e6-ee6f08cdc59a",
                            DateOfBirth = new DateTime(1990, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "frank.h.scott@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Frank",
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.H.SCOTT@WORKBIT.COM",
                            NormalizedUserName = "FRANK.H.SCOTT",
                            PasswordHash = "AQAAAAIAAYagAAAAEEX+9Hm115SkShfZSBLzQm4v2L7AOGDl3dzByIf2aPJ2VfBM0V9AFQ4ixqo3yXhGeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "293f7132-fe3c-49eb-8691-91ce88b09bdd",
                            TwoFactorEnabled = false,
                            UserName = "frank.h.scott"
                        },
                        new
                        {
                            Id = new Guid("b2222222-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c50ca3d8-a2c4-43df-82d4-5ff5aa9370fe",
                            DateOfBirth = new DateTime(1996, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "grace.l.adams@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Grace",
                            LastName = "Adams",
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.L.ADAMS@WORKBIT.COM",
                            NormalizedUserName = "GRACE.L.ADAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAEEer4oYCmf3GDMBqtYwRaU1sDTXD8ZM85r4WT0S1sPes9tEKzlsagHK6/ceuTQgKzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4fae092-ca90-4d01-9754-484bb0e56b0a",
                            TwoFactorEnabled = false,
                            UserName = "grace.l.adams"
                        },
                        new
                        {
                            Id = new Guid("b2222222-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bceaded9-9003-450d-bb73-a626ef456349",
                            DateOfBirth = new DateTime(1997, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "harry.n.brooks@workbit.com",
                            EmailConfirmed = false,
                            FirstName = "Harry",
                            LastName = "Brooks",
                            LockoutEnabled = false,
                            NormalizedEmail = "HARRY.N.BROOKS@WORKBIT.COM",
                            NormalizedUserName = "HARRY.N.BROOKS",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDuY4WOYt9aRSJ2tDbs2IslSBDuci+ZB42CQ+EObsYW4EZLwTYC6swaFFOpX5MRJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e067503b-0279-4a70-aab2-8783f7a45493",
                            TwoFactorEnabled = false,
                            UserName = "harry.n.brooks"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Employee", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId");

                    b.HasIndex("JobId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("b2222222-0000-0000-0000-000000000001"),
                            JobId = 1,
                            Level = 1
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b2222222-0000-0000-0000-000000000002"),
                            JobId = 1,
                            Level = 0
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b2222222-0000-0000-0000-000000000003"),
                            JobId = 2,
                            Level = 3
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b2222222-0000-0000-0000-000000000004"),
                            JobId = 2,
                            Level = 2
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b2222222-0000-0000-0000-000000000005"),
                            JobId = 3,
                            Level = 1
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b2222222-0000-0000-0000-000000000006"),
                            JobId = 3,
                            Level = 0
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b2222222-0000-0000-0000-000000000007"),
                            JobId = 4,
                            Level = 2
                        },
                        new
                        {
                            ApplicationUserId = new Guid("b2222222-0000-0000-0000-000000000008"),
                            JobId = 4,
                            Level = 3
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Manager", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCeo")
                        .HasColumnType("bit");

                    b.Property<string>("OfficePhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("a1111111-0000-0000-0000-000000000001"),
                            IsCeo = true,
                            OfficePhone = "+1-555-1010"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a1111111-0000-0000-0000-000000000002"),
                            IsCeo = false,
                            OfficePhone = "+1-555-2020"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a1111111-0000-0000-0000-000000000003"),
                            IsCeo = false,
                            OfficePhone = "+1-555-3030"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a1111111-0000-0000-0000-000000000004"),
                            IsCeo = false,
                            OfficePhone = "+1-555-4040"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("CheckIn")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("CheckOut")
                        .HasColumnType("time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attendances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckIn = new TimeSpan(0, 9, 0, 0, 0),
                            CheckOut = new TimeSpan(0, 17, 0, 0, 0),
                            Date = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000001"),
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CheckIn = new TimeSpan(0, 9, 30, 0, 0),
                            CheckOut = new TimeSpan(0, 17, 0, 0, 0),
                            Date = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000002"),
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000003"),
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            CheckIn = new TimeSpan(0, 8, 45, 0, 0),
                            CheckOut = new TimeSpan(0, 16, 30, 0, 0),
                            Date = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000004"),
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000005"),
                            Status = 2
                        },
                        new
                        {
                            Id = 6,
                            CheckIn = new TimeSpan(0, 9, 15, 0, 0),
                            CheckOut = new TimeSpan(0, 17, 15, 0, 0),
                            Date = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000006"),
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CheckIn = new TimeSpan(0, 9, 0, 0, 0),
                            CheckOut = new TimeSpan(0, 17, 0, 0, 0),
                            Date = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000007"),
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000008"),
                            Status = 2
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("CeoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CeoId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Business Blvd, New York, NY, USA",
                            CeoId = new Guid("a1111111-0000-0000-0000-000000000001"),
                            ContactPhone = "+1-555-0000",
                            Name = "Workbit Solutions Inc."
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Handles recruitment, payroll, and employee relations.",
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Manages infrastructure, development, and support.",
                            Name = "IT"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Responsible for budgeting, forecasting, and reporting.",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Handles brand strategy and campaigns.",
                            Name = "Marketing"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.DepartmentManager", b =>
                {
                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("ManagerId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentsManagers");

                    b.HasData(
                        new
                        {
                            ManagerId = new Guid("a1111111-0000-0000-0000-000000000002"),
                            DepartmentId = 1
                        },
                        new
                        {
                            ManagerId = new Guid("a1111111-0000-0000-0000-000000000003"),
                            DepartmentId = 2
                        },
                        new
                        {
                            ManagerId = new Guid("a1111111-0000-0000-0000-000000000004"),
                            DepartmentId = 3
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseSalary = 70000m,
                            DepartmentId = 2,
                            Description = "Develops and maintains applications.",
                            Title = "Software Engineer"
                        },
                        new
                        {
                            Id = 2,
                            BaseSalary = 50000m,
                            DepartmentId = 1,
                            Description = "Manages hiring and employee support.",
                            Title = "HR Specialist"
                        },
                        new
                        {
                            Id = 3,
                            BaseSalary = 60000m,
                            DepartmentId = 3,
                            Description = "Prepares financial reports and analysis.",
                            Title = "Financial Analyst"
                        },
                        new
                        {
                            Id = 4,
                            BaseSalary = 45000m,
                            DepartmentId = 4,
                            Description = "Supports campaigns and communications.",
                            Title = "Marketing Coordinator"
                        });
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.SalaryPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Bonus")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateOfPayment")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Deduction")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Payment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SalaryPayments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bonus = 200m,
                            DateOfPayment = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deduction = 100m,
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000001"),
                            Notes = "Monthly salary + punctuality bonus",
                            Payment = 2800m
                        },
                        new
                        {
                            Id = 2,
                            Bonus = 300m,
                            DateOfPayment = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deduction = 0m,
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000002"),
                            Notes = "Excellent performance",
                            Payment = 5200m
                        },
                        new
                        {
                            Id = 3,
                            Bonus = 150m,
                            DateOfPayment = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deduction = 50m,
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000003"),
                            Payment = 4800m
                        },
                        new
                        {
                            Id = 4,
                            Bonus = 500m,
                            DateOfPayment = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deduction = 200m,
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000004"),
                            Notes = "Late project delivery",
                            Payment = 7000m
                        },
                        new
                        {
                            Id = 5,
                            Bonus = 100m,
                            DateOfPayment = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deduction = 0m,
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000005"),
                            Payment = 4200m
                        },
                        new
                        {
                            Id = 6,
                            Bonus = 400m,
                            DateOfPayment = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deduction = 150m,
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000006"),
                            Notes = "Exceeded marketing targets",
                            Payment = 6500m
                        },
                        new
                        {
                            Id = 7,
                            Bonus = 0m,
                            DateOfPayment = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deduction = 50m,
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000007"),
                            Notes = "One day unpaid leave",
                            Payment = 3000m
                        },
                        new
                        {
                            Id = 8,
                            Bonus = 350m,
                            DateOfPayment = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deduction = 0m,
                            EmployeeId = new Guid("b2222222-0000-0000-0000-000000000008"),
                            Notes = "On-time delivery and initiative",
                            Payment = 6000m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Employee", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("Workbit.Infrastructure.Database.Entities.Account.Employee", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Manager", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Attendance", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Company", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.Manager", "Ceo")
                        .WithMany()
                        .HasForeignKey("CeoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ceo");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.DepartmentManager", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("DepartmentManagers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.Manager", "Manager")
                        .WithMany("DepartmentManagers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Department", "Department")
                        .WithMany("Jobs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.SalaryPayment", b =>
                {
                    b.HasOne("Workbit.Infrastructure.Database.Entities.Account.Employee", "Employee")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("SalaryPayments");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Account.Manager", b =>
                {
                    b.Navigation("DepartmentManagers");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Department", b =>
                {
                    b.Navigation("DepartmentManagers");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Workbit.Infrastructure.Database.Entities.Job", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
